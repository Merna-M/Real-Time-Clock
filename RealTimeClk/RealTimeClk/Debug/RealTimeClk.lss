
RealTimeClk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  000013e8  0000147c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800116  00800116  00001532  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001534  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00001c88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018ee  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071c  00000000  00000000  00003736  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3a  00000000  00000000  00003e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004dc  00000000  00000000  0000498c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ae  00000000  00000000  00004e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011c0  00000000  00000000  00005416  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__vector_4>
      14:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 15 09 	jmp	0x122a	; 0x122a <__vector_10>
      2c:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 31       	cpi	r26, 0x16	; 22
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e1       	ldi	r26, 0x16	; 22
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 32       	cpi	r26, 0x24	; 36
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 68 05 	call	0xad0	; 0xad0 <main>
      8a:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vSetPinDir>:


void DIO_vSetPinDir (uint8 Copy_u8Port , uint8 Copy_u8Pin , uint8 Copy_u8Dir)
{
	//switch the selected port
	switch(Copy_u8Port) 
      92:	84 34       	cpi	r24, 0x44	; 68
      94:	09 f4       	brne	.+2      	; 0x98 <DIO_vSetPinDir+0x6>
      96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_vSetPinDir+0xe8>
      98:	85 34       	cpi	r24, 0x45	; 69
      9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vSetPinDir+0x1c>
      9c:	82 34       	cpi	r24, 0x42	; 66
      9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vSetPinDir+0x74>
      a0:	83 34       	cpi	r24, 0x43	; 67
      a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vSetPinDir+0x14>
      a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_vSetPinDir+0xae>
      a6:	81 34       	cpi	r24, 0x41	; 65
      a8:	09 f0       	breq	.+2      	; 0xac <DIO_vSetPinDir+0x1a>
      aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vSetPinDir+0x120>
      ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vSetPinDir+0x3a>
      ae:	82 36       	cpi	r24, 0x62	; 98
      b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vSetPinDir+0x74>
      b2:	83 36       	cpi	r24, 0x63	; 99
      b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vSetPinDir+0x2c>
      b6:	81 36       	cpi	r24, 0x61	; 97
      b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vSetPinDir+0x2a>
      ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vSetPinDir+0x120>
      bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vSetPinDir+0x3a>
      be:	83 36       	cpi	r24, 0x63	; 99
      c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vSetPinDir+0x32>
      c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_vSetPinDir+0xae>
      c4:	84 36       	cpi	r24, 0x64	; 100
      c6:	09 f0       	breq	.+2      	; 0xca <DIO_vSetPinDir+0x38>
      c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vSetPinDir+0x120>
      ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_vSetPinDir+0xe8>
	{
		case 'A':
		case 'a':	//PortA
		if (Copy_u8Dir == 1)	//direction is output
      cc:	41 30       	cpi	r20, 0x01	; 1
      ce:	69 f4       	brne	.+26     	; 0xea <DIO_vSetPinDir+0x58>
		{
			SET_BIT(DDRA , Copy_u8Pin);
      d0:	2a b3       	in	r18, 0x1a	; 26
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	ac 01       	movw	r20, r24
      d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vSetPinDir+0x4c>
      da:	44 0f       	add	r20, r20
      dc:	55 1f       	adc	r21, r21
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vSetPinDir+0x48>
      e2:	ba 01       	movw	r22, r20
      e4:	62 2b       	or	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
		}
		else                   //direction is input
		{
			CLR_BIT(DDRA , Copy_u8Pin);
      ea:	2a b3       	in	r18, 0x1a	; 26
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	ac 01       	movw	r20, r24
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vSetPinDir+0x66>
      f4:	44 0f       	add	r20, r20
      f6:	55 1f       	adc	r21, r21
      f8:	6a 95       	dec	r22
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vSetPinDir+0x62>
      fc:	ba 01       	movw	r22, r20
      fe:	60 95       	com	r22
     100:	62 23       	and	r22, r18
     102:	6a bb       	out	0x1a, r22	; 26
     104:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':	//PortB
		if (Copy_u8Dir == 1)
     106:	41 30       	cpi	r20, 0x01	; 1
     108:	69 f4       	brne	.+26     	; 0x124 <DIO_vSetPinDir+0x92>
		{
			SET_BIT(DDRB , Copy_u8Pin);
     10a:	27 b3       	in	r18, 0x17	; 23
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	ac 01       	movw	r20, r24
     112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vSetPinDir+0x86>
     114:	44 0f       	add	r20, r20
     116:	55 1f       	adc	r21, r21
     118:	6a 95       	dec	r22
     11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vSetPinDir+0x82>
     11c:	ba 01       	movw	r22, r20
     11e:	62 2b       	or	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB , Copy_u8Pin);
     124:	27 b3       	in	r18, 0x17	; 23
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	ac 01       	movw	r20, r24
     12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vSetPinDir+0xa0>
     12e:	44 0f       	add	r20, r20
     130:	55 1f       	adc	r21, r21
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vSetPinDir+0x9c>
     136:	ba 01       	movw	r22, r20
     138:	60 95       	com	r22
     13a:	62 23       	and	r22, r18
     13c:	67 bb       	out	0x17, r22	; 23
     13e:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':	//PortC
		if (Copy_u8Dir == 1)
     140:	41 30       	cpi	r20, 0x01	; 1
     142:	69 f4       	brne	.+26     	; 0x15e <DIO_vSetPinDir+0xcc>
		{
			SET_BIT(DDRC , Copy_u8Pin);
     144:	24 b3       	in	r18, 0x14	; 20
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	ac 01       	movw	r20, r24
     14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vSetPinDir+0xc0>
     14e:	44 0f       	add	r20, r20
     150:	55 1f       	adc	r21, r21
     152:	6a 95       	dec	r22
     154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vSetPinDir+0xbc>
     156:	ba 01       	movw	r22, r20
     158:	62 2b       	or	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC , Copy_u8Pin);
     15e:	24 b3       	in	r18, 0x14	; 20
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	ac 01       	movw	r20, r24
     166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vSetPinDir+0xda>
     168:	44 0f       	add	r20, r20
     16a:	55 1f       	adc	r21, r21
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vSetPinDir+0xd6>
     170:	ba 01       	movw	r22, r20
     172:	60 95       	com	r22
     174:	62 23       	and	r22, r18
     176:	64 bb       	out	0x14, r22	; 20
     178:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':	//PortD
		if (Copy_u8Dir == 1)
     17a:	41 30       	cpi	r20, 0x01	; 1
     17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vSetPinDir+0x106>
		{
			SET_BIT(DDRD , Copy_u8Pin);
     17e:	21 b3       	in	r18, 0x11	; 17
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	ac 01       	movw	r20, r24
     186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vSetPinDir+0xfa>
     188:	44 0f       	add	r20, r20
     18a:	55 1f       	adc	r21, r21
     18c:	6a 95       	dec	r22
     18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vSetPinDir+0xf6>
     190:	ba 01       	movw	r22, r20
     192:	62 2b       	or	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD , Copy_u8Pin);
     198:	21 b3       	in	r18, 0x11	; 17
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	ac 01       	movw	r20, r24
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vSetPinDir+0x114>
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vSetPinDir+0x110>
     1aa:	ba 01       	movw	r22, r20
     1ac:	60 95       	com	r22
     1ae:	62 23       	and	r22, r18
     1b0:	61 bb       	out	0x11, r22	; 17
     1b2:	08 95       	ret

000001b4 <DIO_vWritePin>:
}


void DIO_vWritePin (uint8 Copy_u8Port , uint8 Copy_u8Pin , uint8 Copy_u8Value)
{
	switch (Copy_u8Port)
     1b4:	84 34       	cpi	r24, 0x44	; 68
     1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vWritePin+0x6>
     1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_vWritePin+0xe8>
     1ba:	85 34       	cpi	r24, 0x45	; 69
     1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_vWritePin+0x1c>
     1be:	82 34       	cpi	r24, 0x42	; 66
     1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_vWritePin+0x74>
     1c2:	83 34       	cpi	r24, 0x43	; 67
     1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vWritePin+0x14>
     1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_vWritePin+0xae>
     1c8:	81 34       	cpi	r24, 0x41	; 65
     1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vWritePin+0x1a>
     1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_vWritePin+0x120>
     1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_vWritePin+0x3a>
     1d0:	82 36       	cpi	r24, 0x62	; 98
     1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_vWritePin+0x74>
     1d4:	83 36       	cpi	r24, 0x63	; 99
     1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_vWritePin+0x2c>
     1d8:	81 36       	cpi	r24, 0x61	; 97
     1da:	09 f0       	breq	.+2      	; 0x1de <DIO_vWritePin+0x2a>
     1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_vWritePin+0x120>
     1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_vWritePin+0x3a>
     1e0:	83 36       	cpi	r24, 0x63	; 99
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_vWritePin+0x32>
     1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_vWritePin+0xae>
     1e6:	84 36       	cpi	r24, 0x64	; 100
     1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_vWritePin+0x38>
     1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_vWritePin+0x120>
     1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_vWritePin+0xe8>
	{
		case 'A':
		case 'a':	//PortA
		if (Copy_u8Value == 1)
     1ee:	41 30       	cpi	r20, 0x01	; 1
     1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_vWritePin+0x58>
		{
			SET_BIT(PORTA , Copy_u8Pin);
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	ac 01       	movw	r20, r24
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_vWritePin+0x4c>
     1fc:	44 0f       	add	r20, r20
     1fe:	55 1f       	adc	r21, r21
     200:	6a 95       	dec	r22
     202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_vWritePin+0x48>
     204:	ba 01       	movw	r22, r20
     206:	62 2b       	or	r22, r18
     208:	6b bb       	out	0x1b, r22	; 27
     20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA , Copy_u8Pin);
     20c:	2b b3       	in	r18, 0x1b	; 27
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	ac 01       	movw	r20, r24
     214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vWritePin+0x66>
     216:	44 0f       	add	r20, r20
     218:	55 1f       	adc	r21, r21
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vWritePin+0x62>
     21e:	ba 01       	movw	r22, r20
     220:	60 95       	com	r22
     222:	62 23       	and	r22, r18
     224:	6b bb       	out	0x1b, r22	; 27
     226:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':	//PortB
		if (Copy_u8Value == 1)
     228:	41 30       	cpi	r20, 0x01	; 1
     22a:	69 f4       	brne	.+26     	; 0x246 <DIO_vWritePin+0x92>
		{
			SET_BIT(PORTB , Copy_u8Pin);
     22c:	28 b3       	in	r18, 0x18	; 24
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	ac 01       	movw	r20, r24
     234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vWritePin+0x86>
     236:	44 0f       	add	r20, r20
     238:	55 1f       	adc	r21, r21
     23a:	6a 95       	dec	r22
     23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vWritePin+0x82>
     23e:	ba 01       	movw	r22, r20
     240:	62 2b       	or	r22, r18
     242:	68 bb       	out	0x18, r22	; 24
     244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB , Copy_u8Pin);
     246:	28 b3       	in	r18, 0x18	; 24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	ac 01       	movw	r20, r24
     24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vWritePin+0xa0>
     250:	44 0f       	add	r20, r20
     252:	55 1f       	adc	r21, r21
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vWritePin+0x9c>
     258:	ba 01       	movw	r22, r20
     25a:	60 95       	com	r22
     25c:	62 23       	and	r22, r18
     25e:	68 bb       	out	0x18, r22	; 24
     260:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':	//PortC
		if (Copy_u8Value == 1)
     262:	41 30       	cpi	r20, 0x01	; 1
     264:	69 f4       	brne	.+26     	; 0x280 <DIO_vWritePin+0xcc>
		{
			SET_BIT(PORTC , Copy_u8Pin);
     266:	25 b3       	in	r18, 0x15	; 21
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	ac 01       	movw	r20, r24
     26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vWritePin+0xc0>
     270:	44 0f       	add	r20, r20
     272:	55 1f       	adc	r21, r21
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vWritePin+0xbc>
     278:	ba 01       	movw	r22, r20
     27a:	62 2b       	or	r22, r18
     27c:	65 bb       	out	0x15, r22	; 21
     27e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC , Copy_u8Pin);
     280:	25 b3       	in	r18, 0x15	; 21
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	ac 01       	movw	r20, r24
     288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vWritePin+0xda>
     28a:	44 0f       	add	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vWritePin+0xd6>
     292:	ba 01       	movw	r22, r20
     294:	60 95       	com	r22
     296:	62 23       	and	r22, r18
     298:	65 bb       	out	0x15, r22	; 21
     29a:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':	//PortD
		if (Copy_u8Value == 1)
     29c:	41 30       	cpi	r20, 0x01	; 1
     29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_vWritePin+0x106>
		{
			SET_BIT(PORTD , Copy_u8Pin);
     2a0:	22 b3       	in	r18, 0x12	; 18
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	ac 01       	movw	r20, r24
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vWritePin+0xfa>
     2aa:	44 0f       	add	r20, r20
     2ac:	55 1f       	adc	r21, r21
     2ae:	6a 95       	dec	r22
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vWritePin+0xf6>
     2b2:	ba 01       	movw	r22, r20
     2b4:	62 2b       	or	r22, r18
     2b6:	62 bb       	out	0x12, r22	; 18
     2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD , Copy_u8Pin);
     2ba:	22 b3       	in	r18, 0x12	; 18
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	ac 01       	movw	r20, r24
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vWritePin+0x114>
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	6a 95       	dec	r22
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vWritePin+0x110>
     2cc:	ba 01       	movw	r22, r20
     2ce:	60 95       	com	r22
     2d0:	62 23       	and	r22, r18
     2d2:	62 bb       	out	0x12, r22	; 18
     2d4:	08 95       	ret

000002d6 <DIO_vTogglePin>:
}


void DIO_vTogglePin (uint8 Copy_u8Port , uint8 Copy_u8Pin)
{
	switch (Copy_u8Port)
     2d6:	84 34       	cpi	r24, 0x44	; 68
     2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_vTogglePin+0x6>
     2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_vTogglePin+0x80>
     2dc:	85 34       	cpi	r24, 0x45	; 69
     2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_vTogglePin+0x1a>
     2e0:	82 34       	cpi	r24, 0x42	; 66
     2e2:	f9 f0       	breq	.+62     	; 0x322 <DIO_vTogglePin+0x4c>
     2e4:	83 34       	cpi	r24, 0x43	; 67
     2e6:	50 f5       	brcc	.+84     	; 0x33c <DIO_vTogglePin+0x66>
     2e8:	81 34       	cpi	r24, 0x41	; 65
     2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_vTogglePin+0x18>
     2ec:	40 c0       	rjmp	.+128    	; 0x36e <DIO_vTogglePin+0x98>
     2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_vTogglePin+0x32>
     2f0:	82 36       	cpi	r24, 0x62	; 98
     2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_vTogglePin+0x4c>
     2f4:	83 36       	cpi	r24, 0x63	; 99
     2f6:	18 f4       	brcc	.+6      	; 0x2fe <DIO_vTogglePin+0x28>
     2f8:	81 36       	cpi	r24, 0x61	; 97
     2fa:	c9 f5       	brne	.+114    	; 0x36e <DIO_vTogglePin+0x98>
     2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_vTogglePin+0x32>
     2fe:	83 36       	cpi	r24, 0x63	; 99
     300:	e9 f0       	breq	.+58     	; 0x33c <DIO_vTogglePin+0x66>
     302:	84 36       	cpi	r24, 0x64	; 100
     304:	a1 f5       	brne	.+104    	; 0x36e <DIO_vTogglePin+0x98>
     306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_vTogglePin+0x80>
	{
		case 'A':
		case 'a':
		TOGGLE_BIT(PORTA , Copy_u8Pin);
     308:	2b b3       	in	r18, 0x1b	; 27
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	ac 01       	movw	r20, r24
     310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_vTogglePin+0x40>
     312:	44 0f       	add	r20, r20
     314:	55 1f       	adc	r21, r21
     316:	6a 95       	dec	r22
     318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_vTogglePin+0x3c>
     31a:	ba 01       	movw	r22, r20
     31c:	62 27       	eor	r22, r18
     31e:	6b bb       	out	0x1b, r22	; 27
		break;
     320:	08 95       	ret
		
		case 'B':
		case 'b':
		TOGGLE_BIT(PORTB , Copy_u8Pin);
     322:	28 b3       	in	r18, 0x18	; 24
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	ac 01       	movw	r20, r24
     32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_vTogglePin+0x5a>
     32c:	44 0f       	add	r20, r20
     32e:	55 1f       	adc	r21, r21
     330:	6a 95       	dec	r22
     332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_vTogglePin+0x56>
     334:	ba 01       	movw	r22, r20
     336:	62 27       	eor	r22, r18
     338:	68 bb       	out	0x18, r22	; 24
		break;
     33a:	08 95       	ret
		
		case 'C':
		case 'c':
		TOGGLE_BIT(PORTC , Copy_u8Pin);
     33c:	25 b3       	in	r18, 0x15	; 21
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	ac 01       	movw	r20, r24
     344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_vTogglePin+0x74>
     346:	44 0f       	add	r20, r20
     348:	55 1f       	adc	r21, r21
     34a:	6a 95       	dec	r22
     34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_vTogglePin+0x70>
     34e:	ba 01       	movw	r22, r20
     350:	62 27       	eor	r22, r18
     352:	65 bb       	out	0x15, r22	; 21
		break;
     354:	08 95       	ret
		
		case 'D':
		case 'd':
		TOGGLE_BIT(PORTD , Copy_u8Pin);
     356:	22 b3       	in	r18, 0x12	; 18
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	ac 01       	movw	r20, r24
     35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_vTogglePin+0x8e>
     360:	44 0f       	add	r20, r20
     362:	55 1f       	adc	r21, r21
     364:	6a 95       	dec	r22
     366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_vTogglePin+0x8a>
     368:	ba 01       	movw	r22, r20
     36a:	62 27       	eor	r22, r18
     36c:	62 bb       	out	0x12, r22	; 18
     36e:	08 95       	ret

00000370 <DIO_u8ReadPin>:


uint8 DIO_u8ReadPin (uint8 Copy_u8Port , uint8 Copy_u8Pin)
{
	uint8 return_value;
	switch (Copy_u8Port)
     370:	84 34       	cpi	r24, 0x44	; 68
     372:	b1 f1       	breq	.+108    	; 0x3e0 <DIO_u8ReadPin+0x70>
     374:	85 34       	cpi	r24, 0x45	; 69
     376:	38 f4       	brcc	.+14     	; 0x386 <DIO_u8ReadPin+0x16>
     378:	82 34       	cpi	r24, 0x42	; 66
     37a:	e1 f0       	breq	.+56     	; 0x3b4 <DIO_u8ReadPin+0x44>
     37c:	83 34       	cpi	r24, 0x43	; 67
     37e:	28 f5       	brcc	.+74     	; 0x3ca <DIO_u8ReadPin+0x5a>
     380:	81 34       	cpi	r24, 0x41	; 65
     382:	c1 f5       	brne	.+112    	; 0x3f4 <DIO_u8ReadPin+0x84>
     384:	0c c0       	rjmp	.+24     	; 0x39e <DIO_u8ReadPin+0x2e>
     386:	82 36       	cpi	r24, 0x62	; 98
     388:	a9 f0       	breq	.+42     	; 0x3b4 <DIO_u8ReadPin+0x44>
     38a:	83 36       	cpi	r24, 0x63	; 99
     38c:	18 f4       	brcc	.+6      	; 0x394 <DIO_u8ReadPin+0x24>
     38e:	81 36       	cpi	r24, 0x61	; 97
     390:	89 f5       	brne	.+98     	; 0x3f4 <DIO_u8ReadPin+0x84>
     392:	05 c0       	rjmp	.+10     	; 0x39e <DIO_u8ReadPin+0x2e>
     394:	83 36       	cpi	r24, 0x63	; 99
     396:	c9 f0       	breq	.+50     	; 0x3ca <DIO_u8ReadPin+0x5a>
     398:	84 36       	cpi	r24, 0x64	; 100
     39a:	61 f5       	brne	.+88     	; 0x3f4 <DIO_u8ReadPin+0x84>
     39c:	21 c0       	rjmp	.+66     	; 0x3e0 <DIO_u8ReadPin+0x70>
	{
		case 'A':
		case 'a':
		return_value = READ_BIT(PINA , Copy_u8Pin);
     39e:	29 b3       	in	r18, 0x19	; 25
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	c9 01       	movw	r24, r18
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_u8ReadPin+0x3a>
     3a6:	95 95       	asr	r25
     3a8:	87 95       	ror	r24
     3aa:	6a 95       	dec	r22
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_u8ReadPin+0x36>
     3ae:	98 2f       	mov	r25, r24
     3b0:	91 70       	andi	r25, 0x01	; 1
		break;
     3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <DIO_u8ReadPin+0x84>
		
		case 'B':
		case 'b':
		return_value = READ_BIT(PINB , Copy_u8Pin);
     3b4:	26 b3       	in	r18, 0x16	; 22
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	c9 01       	movw	r24, r18
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_u8ReadPin+0x50>
     3bc:	95 95       	asr	r25
     3be:	87 95       	ror	r24
     3c0:	6a 95       	dec	r22
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_u8ReadPin+0x4c>
     3c4:	98 2f       	mov	r25, r24
     3c6:	91 70       	andi	r25, 0x01	; 1
		break;
     3c8:	15 c0       	rjmp	.+42     	; 0x3f4 <DIO_u8ReadPin+0x84>
		
		case 'C':
		case 'c':
		return_value = READ_BIT(PINC , Copy_u8Pin);
     3ca:	23 b3       	in	r18, 0x13	; 19
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	c9 01       	movw	r24, r18
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_u8ReadPin+0x66>
     3d2:	95 95       	asr	r25
     3d4:	87 95       	ror	r24
     3d6:	6a 95       	dec	r22
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_u8ReadPin+0x62>
     3da:	98 2f       	mov	r25, r24
     3dc:	91 70       	andi	r25, 0x01	; 1
		break;
     3de:	0a c0       	rjmp	.+20     	; 0x3f4 <DIO_u8ReadPin+0x84>
		
		case 'D':
		case 'd':
		return_value = READ_BIT(PIND , Copy_u8Pin);
     3e0:	20 b3       	in	r18, 0x10	; 16
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	c9 01       	movw	r24, r18
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8ReadPin+0x7c>
     3e8:	95 95       	asr	r25
     3ea:	87 95       	ror	r24
     3ec:	6a 95       	dec	r22
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_u8ReadPin+0x78>
     3f0:	98 2f       	mov	r25, r24
     3f2:	91 70       	andi	r25, 0x01	; 1
		break;
	}
	return return_value;
}
     3f4:	89 2f       	mov	r24, r25
     3f6:	08 95       	ret

000003f8 <DIO_vSetPortDir>:



void DIO_vSetPortDir (uint8 Copy_u8Port , uint8 Copy_u8Dir)
{
	switch(Copy_u8Port)
     3f8:	84 34       	cpi	r24, 0x44	; 68
     3fa:	d9 f0       	breq	.+54     	; 0x432 <DIO_vSetPortDir+0x3a>
     3fc:	85 34       	cpi	r24, 0x45	; 69
     3fe:	38 f4       	brcc	.+14     	; 0x40e <DIO_vSetPortDir+0x16>
     400:	82 34       	cpi	r24, 0x42	; 66
     402:	99 f0       	breq	.+38     	; 0x42a <DIO_vSetPortDir+0x32>
     404:	83 34       	cpi	r24, 0x43	; 67
     406:	98 f4       	brcc	.+38     	; 0x42e <DIO_vSetPortDir+0x36>
     408:	81 34       	cpi	r24, 0x41	; 65
     40a:	a1 f4       	brne	.+40     	; 0x434 <DIO_vSetPortDir+0x3c>
     40c:	0c c0       	rjmp	.+24     	; 0x426 <DIO_vSetPortDir+0x2e>
     40e:	82 36       	cpi	r24, 0x62	; 98
     410:	61 f0       	breq	.+24     	; 0x42a <DIO_vSetPortDir+0x32>
     412:	83 36       	cpi	r24, 0x63	; 99
     414:	18 f4       	brcc	.+6      	; 0x41c <DIO_vSetPortDir+0x24>
     416:	81 36       	cpi	r24, 0x61	; 97
     418:	69 f4       	brne	.+26     	; 0x434 <DIO_vSetPortDir+0x3c>
     41a:	05 c0       	rjmp	.+10     	; 0x426 <DIO_vSetPortDir+0x2e>
     41c:	83 36       	cpi	r24, 0x63	; 99
     41e:	39 f0       	breq	.+14     	; 0x42e <DIO_vSetPortDir+0x36>
     420:	84 36       	cpi	r24, 0x64	; 100
     422:	41 f4       	brne	.+16     	; 0x434 <DIO_vSetPortDir+0x3c>
     424:	06 c0       	rjmp	.+12     	; 0x432 <DIO_vSetPortDir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA = Copy_u8Dir;
     426:	6a bb       	out	0x1a, r22	; 26
		break;
     428:	08 95       	ret
		
		case 'B':
		case 'b':
		DDRB = Copy_u8Dir;
     42a:	67 bb       	out	0x17, r22	; 23
		break;
     42c:	08 95       	ret
		
		case 'C':
		case 'c':
		DDRC = Copy_u8Dir;
     42e:	64 bb       	out	0x14, r22	; 20
		break;
     430:	08 95       	ret
		
		case 'D':
		case 'd':
		DDRD = Copy_u8Dir;
     432:	61 bb       	out	0x11, r22	; 17
     434:	08 95       	ret

00000436 <DIO_vWritePort>:
}


void DIO_vWritePort (uint8 Copy_u8Port , uint8 Copy_u8Value)
{
	switch(Copy_u8Port)
     436:	84 34       	cpi	r24, 0x44	; 68
     438:	d9 f0       	breq	.+54     	; 0x470 <DIO_vWritePort+0x3a>
     43a:	85 34       	cpi	r24, 0x45	; 69
     43c:	38 f4       	brcc	.+14     	; 0x44c <DIO_vWritePort+0x16>
     43e:	82 34       	cpi	r24, 0x42	; 66
     440:	99 f0       	breq	.+38     	; 0x468 <DIO_vWritePort+0x32>
     442:	83 34       	cpi	r24, 0x43	; 67
     444:	98 f4       	brcc	.+38     	; 0x46c <DIO_vWritePort+0x36>
     446:	81 34       	cpi	r24, 0x41	; 65
     448:	a1 f4       	brne	.+40     	; 0x472 <DIO_vWritePort+0x3c>
     44a:	0c c0       	rjmp	.+24     	; 0x464 <DIO_vWritePort+0x2e>
     44c:	82 36       	cpi	r24, 0x62	; 98
     44e:	61 f0       	breq	.+24     	; 0x468 <DIO_vWritePort+0x32>
     450:	83 36       	cpi	r24, 0x63	; 99
     452:	18 f4       	brcc	.+6      	; 0x45a <DIO_vWritePort+0x24>
     454:	81 36       	cpi	r24, 0x61	; 97
     456:	69 f4       	brne	.+26     	; 0x472 <DIO_vWritePort+0x3c>
     458:	05 c0       	rjmp	.+10     	; 0x464 <DIO_vWritePort+0x2e>
     45a:	83 36       	cpi	r24, 0x63	; 99
     45c:	39 f0       	breq	.+14     	; 0x46c <DIO_vWritePort+0x36>
     45e:	84 36       	cpi	r24, 0x64	; 100
     460:	41 f4       	brne	.+16     	; 0x472 <DIO_vWritePort+0x3c>
     462:	06 c0       	rjmp	.+12     	; 0x470 <DIO_vWritePort+0x3a>
	{
		case 'A':
		case 'a':
		PORTA = Copy_u8Value;
     464:	6b bb       	out	0x1b, r22	; 27
		break;
     466:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB = Copy_u8Value;
     468:	68 bb       	out	0x18, r22	; 24
		break;
     46a:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC = Copy_u8Value;
     46c:	65 bb       	out	0x15, r22	; 21
		break;
     46e:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD = Copy_u8Value;
     470:	62 bb       	out	0x12, r22	; 18
     472:	08 95       	ret

00000474 <DIO_vTogglePort>:
}


void DIO_vTogglePort (uint8 Copy_u8Port)
{
	switch(Copy_u8Port)
     474:	84 34       	cpi	r24, 0x44	; 68
     476:	09 f1       	breq	.+66     	; 0x4ba <DIO_vTogglePort+0x46>
     478:	85 34       	cpi	r24, 0x45	; 69
     47a:	38 f4       	brcc	.+14     	; 0x48a <DIO_vTogglePort+0x16>
     47c:	82 34       	cpi	r24, 0x42	; 66
     47e:	a9 f0       	breq	.+42     	; 0x4aa <DIO_vTogglePort+0x36>
     480:	83 34       	cpi	r24, 0x43	; 67
     482:	b8 f4       	brcc	.+46     	; 0x4b2 <DIO_vTogglePort+0x3e>
     484:	81 34       	cpi	r24, 0x41	; 65
     486:	e1 f4       	brne	.+56     	; 0x4c0 <DIO_vTogglePort+0x4c>
     488:	0c c0       	rjmp	.+24     	; 0x4a2 <DIO_vTogglePort+0x2e>
     48a:	82 36       	cpi	r24, 0x62	; 98
     48c:	71 f0       	breq	.+28     	; 0x4aa <DIO_vTogglePort+0x36>
     48e:	83 36       	cpi	r24, 0x63	; 99
     490:	18 f4       	brcc	.+6      	; 0x498 <DIO_vTogglePort+0x24>
     492:	81 36       	cpi	r24, 0x61	; 97
     494:	a9 f4       	brne	.+42     	; 0x4c0 <DIO_vTogglePort+0x4c>
     496:	05 c0       	rjmp	.+10     	; 0x4a2 <DIO_vTogglePort+0x2e>
     498:	83 36       	cpi	r24, 0x63	; 99
     49a:	59 f0       	breq	.+22     	; 0x4b2 <DIO_vTogglePort+0x3e>
     49c:	84 36       	cpi	r24, 0x64	; 100
     49e:	81 f4       	brne	.+32     	; 0x4c0 <DIO_vTogglePort+0x4c>
     4a0:	0c c0       	rjmp	.+24     	; 0x4ba <DIO_vTogglePort+0x46>
	{
		case 'A':
		case 'a':
		PORTA =~PORTA;
     4a2:	8b b3       	in	r24, 0x1b	; 27
     4a4:	80 95       	com	r24
     4a6:	8b bb       	out	0x1b, r24	; 27
		break;
     4a8:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB =~PORTB;
     4aa:	88 b3       	in	r24, 0x18	; 24
     4ac:	80 95       	com	r24
     4ae:	88 bb       	out	0x18, r24	; 24
		break;
     4b0:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC =~PORTC;
     4b2:	85 b3       	in	r24, 0x15	; 21
     4b4:	80 95       	com	r24
     4b6:	85 bb       	out	0x15, r24	; 21
		break;
     4b8:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD =~PORTD;
     4ba:	82 b3       	in	r24, 0x12	; 18
     4bc:	80 95       	com	r24
     4be:	82 bb       	out	0x12, r24	; 18
     4c0:	08 95       	ret

000004c2 <DIO_u8ReadPort>:


uint8 DIO_u8ReadPort(uint8 Copy_u8Port)
{
	uint8 return_value;
	switch (Copy_u8Port)
     4c2:	84 34       	cpi	r24, 0x44	; 68
     4c4:	d9 f0       	breq	.+54     	; 0x4fc <DIO_u8ReadPort+0x3a>
     4c6:	85 34       	cpi	r24, 0x45	; 69
     4c8:	38 f4       	brcc	.+14     	; 0x4d8 <DIO_u8ReadPort+0x16>
     4ca:	82 34       	cpi	r24, 0x42	; 66
     4cc:	99 f0       	breq	.+38     	; 0x4f4 <DIO_u8ReadPort+0x32>
     4ce:	83 34       	cpi	r24, 0x43	; 67
     4d0:	98 f4       	brcc	.+38     	; 0x4f8 <DIO_u8ReadPort+0x36>
     4d2:	81 34       	cpi	r24, 0x41	; 65
     4d4:	a1 f4       	brne	.+40     	; 0x4fe <DIO_u8ReadPort+0x3c>
     4d6:	0c c0       	rjmp	.+24     	; 0x4f0 <DIO_u8ReadPort+0x2e>
     4d8:	82 36       	cpi	r24, 0x62	; 98
     4da:	61 f0       	breq	.+24     	; 0x4f4 <DIO_u8ReadPort+0x32>
     4dc:	83 36       	cpi	r24, 0x63	; 99
     4de:	18 f4       	brcc	.+6      	; 0x4e6 <DIO_u8ReadPort+0x24>
     4e0:	81 36       	cpi	r24, 0x61	; 97
     4e2:	69 f4       	brne	.+26     	; 0x4fe <DIO_u8ReadPort+0x3c>
     4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <DIO_u8ReadPort+0x2e>
     4e6:	83 36       	cpi	r24, 0x63	; 99
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <DIO_u8ReadPort+0x36>
     4ea:	84 36       	cpi	r24, 0x64	; 100
     4ec:	41 f4       	brne	.+16     	; 0x4fe <DIO_u8ReadPort+0x3c>
     4ee:	06 c0       	rjmp	.+12     	; 0x4fc <DIO_u8ReadPort+0x3a>
	{
		case 'A':
		case 'a':
		return_value = PINA;
     4f0:	99 b3       	in	r25, 0x19	; 25
		break;
     4f2:	05 c0       	rjmp	.+10     	; 0x4fe <DIO_u8ReadPort+0x3c>
		
		case 'B':
		case 'b':
		return_value = PINB;
     4f4:	96 b3       	in	r25, 0x16	; 22
		break;
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <DIO_u8ReadPort+0x3c>
		
		case 'C':
		case 'c':
		return_value = PINC;
     4f8:	93 b3       	in	r25, 0x13	; 19
		break;
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <DIO_u8ReadPort+0x3c>
		
		case 'D':
		case 'd':
		return_value = PIND;
     4fc:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return return_value;
}
     4fe:	89 2f       	mov	r24, r25
     500:	08 95       	ret

00000502 <DIO_vConnectPullUp>:


void DIO_vConnectPullUp (uint8 Copy_u8Port , uint8 Copy_u8Pin , uint8 Copy_u8PullUpCheck)
{
	switch(Copy_u8Port)
     502:	84 34       	cpi	r24, 0x44	; 68
     504:	09 f4       	brne	.+2      	; 0x508 <DIO_vConnectPullUp+0x6>
     506:	71 c0       	rjmp	.+226    	; 0x5ea <DIO_vConnectPullUp+0xe8>
     508:	85 34       	cpi	r24, 0x45	; 69
     50a:	48 f4       	brcc	.+18     	; 0x51e <DIO_vConnectPullUp+0x1c>
     50c:	82 34       	cpi	r24, 0x42	; 66
     50e:	99 f1       	breq	.+102    	; 0x576 <DIO_vConnectPullUp+0x74>
     510:	83 34       	cpi	r24, 0x43	; 67
     512:	08 f0       	brcs	.+2      	; 0x516 <DIO_vConnectPullUp+0x14>
     514:	4d c0       	rjmp	.+154    	; 0x5b0 <DIO_vConnectPullUp+0xae>
     516:	81 34       	cpi	r24, 0x41	; 65
     518:	09 f0       	breq	.+2      	; 0x51c <DIO_vConnectPullUp+0x1a>
     51a:	83 c0       	rjmp	.+262    	; 0x622 <DIO_vConnectPullUp+0x120>
     51c:	0f c0       	rjmp	.+30     	; 0x53c <DIO_vConnectPullUp+0x3a>
     51e:	82 36       	cpi	r24, 0x62	; 98
     520:	51 f1       	breq	.+84     	; 0x576 <DIO_vConnectPullUp+0x74>
     522:	83 36       	cpi	r24, 0x63	; 99
     524:	20 f4       	brcc	.+8      	; 0x52e <DIO_vConnectPullUp+0x2c>
     526:	81 36       	cpi	r24, 0x61	; 97
     528:	09 f0       	breq	.+2      	; 0x52c <DIO_vConnectPullUp+0x2a>
     52a:	7b c0       	rjmp	.+246    	; 0x622 <DIO_vConnectPullUp+0x120>
     52c:	07 c0       	rjmp	.+14     	; 0x53c <DIO_vConnectPullUp+0x3a>
     52e:	83 36       	cpi	r24, 0x63	; 99
     530:	09 f4       	brne	.+2      	; 0x534 <DIO_vConnectPullUp+0x32>
     532:	3e c0       	rjmp	.+124    	; 0x5b0 <DIO_vConnectPullUp+0xae>
     534:	84 36       	cpi	r24, 0x64	; 100
     536:	09 f0       	breq	.+2      	; 0x53a <DIO_vConnectPullUp+0x38>
     538:	74 c0       	rjmp	.+232    	; 0x622 <DIO_vConnectPullUp+0x120>
     53a:	57 c0       	rjmp	.+174    	; 0x5ea <DIO_vConnectPullUp+0xe8>
	{
		case 'A':
		case 'a':  //Port A
		if (Copy_u8PullUpCheck == 1)	//Pull Up is enabled
     53c:	41 30       	cpi	r20, 0x01	; 1
     53e:	69 f4       	brne	.+26     	; 0x55a <DIO_vConnectPullUp+0x58>
		{
			SET_BIT(PORTA , Copy_u8Pin);
     540:	2b b3       	in	r18, 0x1b	; 27
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	ac 01       	movw	r20, r24
     548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_vConnectPullUp+0x4c>
     54a:	44 0f       	add	r20, r20
     54c:	55 1f       	adc	r21, r21
     54e:	6a 95       	dec	r22
     550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_vConnectPullUp+0x48>
     552:	ba 01       	movw	r22, r20
     554:	62 2b       	or	r22, r18
     556:	6b bb       	out	0x1b, r22	; 27
     558:	08 95       	ret
		}
		else							//Pull Up is disabled
		{
			CLR_BIT(PORTA , Copy_u8Pin);
     55a:	2b b3       	in	r18, 0x1b	; 27
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	ac 01       	movw	r20, r24
     562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_vConnectPullUp+0x66>
     564:	44 0f       	add	r20, r20
     566:	55 1f       	adc	r21, r21
     568:	6a 95       	dec	r22
     56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_vConnectPullUp+0x62>
     56c:	ba 01       	movw	r22, r20
     56e:	60 95       	com	r22
     570:	62 23       	and	r22, r18
     572:	6b bb       	out	0x1b, r22	; 27
     574:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b': //Port B
		if (Copy_u8PullUpCheck == 1)
     576:	41 30       	cpi	r20, 0x01	; 1
     578:	69 f4       	brne	.+26     	; 0x594 <DIO_vConnectPullUp+0x92>
		{
			SET_BIT(PORTB , Copy_u8Pin);
     57a:	28 b3       	in	r18, 0x18	; 24
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	ac 01       	movw	r20, r24
     582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_vConnectPullUp+0x86>
     584:	44 0f       	add	r20, r20
     586:	55 1f       	adc	r21, r21
     588:	6a 95       	dec	r22
     58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_vConnectPullUp+0x82>
     58c:	ba 01       	movw	r22, r20
     58e:	62 2b       	or	r22, r18
     590:	68 bb       	out	0x18, r22	; 24
     592:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB , Copy_u8Pin);
     594:	28 b3       	in	r18, 0x18	; 24
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	ac 01       	movw	r20, r24
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_vConnectPullUp+0xa0>
     59e:	44 0f       	add	r20, r20
     5a0:	55 1f       	adc	r21, r21
     5a2:	6a 95       	dec	r22
     5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_vConnectPullUp+0x9c>
     5a6:	ba 01       	movw	r22, r20
     5a8:	60 95       	com	r22
     5aa:	62 23       	and	r22, r18
     5ac:	68 bb       	out	0x18, r22	; 24
     5ae:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':  //Port C
		if (Copy_u8PullUpCheck == 1)
     5b0:	41 30       	cpi	r20, 0x01	; 1
     5b2:	69 f4       	brne	.+26     	; 0x5ce <DIO_vConnectPullUp+0xcc>
		{
			SET_BIT(PORTC , Copy_u8Pin);
     5b4:	25 b3       	in	r18, 0x15	; 21
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	ac 01       	movw	r20, r24
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_vConnectPullUp+0xc0>
     5be:	44 0f       	add	r20, r20
     5c0:	55 1f       	adc	r21, r21
     5c2:	6a 95       	dec	r22
     5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_vConnectPullUp+0xbc>
     5c6:	ba 01       	movw	r22, r20
     5c8:	62 2b       	or	r22, r18
     5ca:	65 bb       	out	0x15, r22	; 21
     5cc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC , Copy_u8Pin);
     5ce:	25 b3       	in	r18, 0x15	; 21
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	ac 01       	movw	r20, r24
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_vConnectPullUp+0xda>
     5d8:	44 0f       	add	r20, r20
     5da:	55 1f       	adc	r21, r21
     5dc:	6a 95       	dec	r22
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_vConnectPullUp+0xd6>
     5e0:	ba 01       	movw	r22, r20
     5e2:	60 95       	com	r22
     5e4:	62 23       	and	r22, r18
     5e6:	65 bb       	out	0x15, r22	; 21
     5e8:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':  //Port D
		if (Copy_u8PullUpCheck == 1)
     5ea:	41 30       	cpi	r20, 0x01	; 1
     5ec:	69 f4       	brne	.+26     	; 0x608 <DIO_vConnectPullUp+0x106>
		{
			SET_BIT(PORTD , Copy_u8Pin);
     5ee:	22 b3       	in	r18, 0x12	; 18
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	ac 01       	movw	r20, r24
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_vConnectPullUp+0xfa>
     5f8:	44 0f       	add	r20, r20
     5fa:	55 1f       	adc	r21, r21
     5fc:	6a 95       	dec	r22
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_vConnectPullUp+0xf6>
     600:	ba 01       	movw	r22, r20
     602:	62 2b       	or	r22, r18
     604:	62 bb       	out	0x12, r22	; 18
     606:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD , Copy_u8Pin);
     608:	22 b3       	in	r18, 0x12	; 18
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	ac 01       	movw	r20, r24
     610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_vConnectPullUp+0x114>
     612:	44 0f       	add	r20, r20
     614:	55 1f       	adc	r21, r21
     616:	6a 95       	dec	r22
     618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_vConnectPullUp+0x110>
     61a:	ba 01       	movw	r22, r20
     61c:	60 95       	com	r22
     61e:	62 23       	and	r22, r18
     620:	62 bb       	out	0x12, r22	; 18
     622:	08 95       	ret

00000624 <GIE_EnableInterrupt>:
#include "GIE_private.h"
#include "GIE_interface.h"

void GIE_EnableInterrupt (void)
{
	SET_BIT(SREG,Ibit); // set Ibit(bit 7) of Status register
     624:	8f b7       	in	r24, 0x3f	; 63
     626:	80 68       	ori	r24, 0x80	; 128
     628:	8f bf       	out	0x3f, r24	; 63
}
     62a:	08 95       	ret

0000062c <GIE_DisableInterrupt>:

void GIE_DisableInterrupt (void)
{
	CLR_BIT(SREG,Ibit); // clear Ibit(bit 7) of Status register
     62c:	8f b7       	in	r24, 0x3f	; 63
     62e:	8f 77       	andi	r24, 0x7F	; 127
     630:	8f bf       	out	0x3f, r24	; 63
     632:	08 95       	ret

00000634 <KYP_vInit>:
#include "KYP_interface.h"

void KYP_vInit(void)
{
	DIO_vSetPortDir(KYP_PORT,0x0F);//first 4 pins are output and last 4 pins are input
     634:	82 e4       	ldi	r24, 0x42	; 66
     636:	6f e0       	ldi	r22, 0x0F	; 15
     638:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_vSetPortDir>
	/* connect pull up */
	DIO_vConnectPullUp(KYP_PORT,KYP_COL1_PIN,1);
     63c:	82 e4       	ldi	r24, 0x42	; 66
     63e:	64 e0       	ldi	r22, 0x04	; 4
     640:	41 e0       	ldi	r20, 0x01	; 1
     642:	0e 94 81 02 	call	0x502	; 0x502 <DIO_vConnectPullUp>
	DIO_vConnectPullUp(KYP_PORT,KYP_COL2_PIN,1);
     646:	82 e4       	ldi	r24, 0x42	; 66
     648:	65 e0       	ldi	r22, 0x05	; 5
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	0e 94 81 02 	call	0x502	; 0x502 <DIO_vConnectPullUp>
	DIO_vConnectPullUp(KYP_PORT,KYP_COL3_PIN,1);
     650:	82 e4       	ldi	r24, 0x42	; 66
     652:	66 e0       	ldi	r22, 0x06	; 6
     654:	41 e0       	ldi	r20, 0x01	; 1
     656:	0e 94 81 02 	call	0x502	; 0x502 <DIO_vConnectPullUp>
	DIO_vConnectPullUp(KYP_PORT,KYP_COL4_PIN,1);
     65a:	82 e4       	ldi	r24, 0x42	; 66
     65c:	67 e0       	ldi	r22, 0x07	; 7
     65e:	41 e0       	ldi	r20, 0x01	; 1
     660:	0e 94 81 02 	call	0x502	; 0x502 <DIO_vConnectPullUp>
	/* Initialize rows with 1 */
	DIO_vWritePin(KYP_PORT,KYP_ROW1_PIN,HIGH);
     664:	82 e4       	ldi	r24, 0x42	; 66
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	41 e0       	ldi	r20, 0x01	; 1
     66a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(KYP_PORT,KYP_ROW2_PIN,HIGH);
     66e:	82 e4       	ldi	r24, 0x42	; 66
     670:	61 e0       	ldi	r22, 0x01	; 1
     672:	41 e0       	ldi	r20, 0x01	; 1
     674:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(KYP_PORT,KYP_ROW3_PIN,HIGH);
     678:	82 e4       	ldi	r24, 0x42	; 66
     67a:	62 e0       	ldi	r22, 0x02	; 2
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(KYP_PORT,KYP_ROW4_PIN,HIGH);
     682:	82 e4       	ldi	r24, 0x42	; 66
     684:	63 e0       	ldi	r22, 0x03	; 3
     686:	41 e0       	ldi	r20, 0x01	; 1
     688:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
}
     68c:	08 95       	ret

0000068e <KYP_u8CheckPress>:

uint8 KYP_u8CheckPress(void)
{
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	60 97       	sbiw	r28, 0x10	; 16
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
	//local array for the ascii values of keypad
	uint8 LOC_KYP_ARR[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     6a6:	de 01       	movw	r26, r28
     6a8:	11 96       	adiw	r26, 0x01	; 1
     6aa:	e0 e6       	ldi	r30, 0x60	; 96
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 e1       	ldi	r24, 0x10	; 16
     6b0:	01 90       	ld	r0, Z+
     6b2:	0d 92       	st	X+, r0
     6b4:	81 50       	subi	r24, 0x01	; 1
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <KYP_u8CheckPress+0x22>
	uint8 LOC_row , LOC_col; // counters for the loops
	uint8 LOC_ReadX = 1;
	uint8 Return_Value = NOT_PRESSED; //value to be returned
	for(LOC_row = 0 ; LOC_row < 4 ; LOC_row++)
     6b8:	00 e0       	ldi	r16, 0x00	; 0
	{
		DIO_vWritePin(KYP_PORT,LOC_row,LOW);
     6ba:	82 e4       	ldi	r24, 0x42	; 66
     6bc:	60 2f       	mov	r22, r16
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
		for(LOC_col=0 ; LOC_col<4 ; LOC_col++)
     6c4:	10 e0       	ldi	r17, 0x00	; 0
		{
			LOC_ReadX = DIO_u8ReadPin(KYP_PORT,LOC_col+4);//read the switch , col+4 as the first pin starts from 4
     6c6:	61 2f       	mov	r22, r17
     6c8:	6c 5f       	subi	r22, 0xFC	; 252
     6ca:	82 e4       	ldi	r24, 0x42	; 66
     6cc:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_u8ReadPin>
			if(LOC_ReadX == 0)
     6d0:	88 23       	and	r24, r24
     6d2:	89 f4       	brne	.+34     	; 0x6f6 <KYP_u8CheckPress+0x68>
			{
				Return_Value = LOC_KYP_ARR[LOC_row][LOC_col];
     6d4:	e0 2f       	mov	r30, r16
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	e1 0f       	add	r30, r17
     6e2:	f1 1d       	adc	r31, r1
     6e4:	ec 0f       	add	r30, r28
     6e6:	fd 1f       	adc	r31, r29
     6e8:	11 81       	ldd	r17, Z+1	; 0x01
				break;
			}
		}
		//return the pin to default 1
		DIO_vWritePin(KYP_PORT,LOC_row,HIGH);
     6ea:	82 e4       	ldi	r24, 0x42	; 66
     6ec:	60 2f       	mov	r22, r16
     6ee:	41 e0       	ldi	r20, 0x01	; 1
     6f0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <KYP_u8CheckPress+0x70>
	uint8 LOC_ReadX = 1;
	uint8 Return_Value = NOT_PRESSED; //value to be returned
	for(LOC_row = 0 ; LOC_row < 4 ; LOC_row++)
	{
		DIO_vWritePin(KYP_PORT,LOC_row,LOW);
		for(LOC_col=0 ; LOC_col<4 ; LOC_col++)
     6f6:	1f 5f       	subi	r17, 0xFF	; 255
     6f8:	14 30       	cpi	r17, 0x04	; 4
     6fa:	29 f7       	brne	.-54     	; 0x6c6 <KYP_u8CheckPress+0x38>
     6fc:	0c c0       	rjmp	.+24     	; 0x716 <KYP_u8CheckPress+0x88>
		{
			break;
		}	
	}
	return Return_Value;
     6fe:	81 2f       	mov	r24, r17
     700:	60 96       	adiw	r28, 0x10	; 16
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	08 95       	ret
				Return_Value = LOC_KYP_ARR[LOC_row][LOC_col];
				break;
			}
		}
		//return the pin to default 1
		DIO_vWritePin(KYP_PORT,LOC_row,HIGH);
     716:	82 e4       	ldi	r24, 0x42	; 66
     718:	60 2f       	mov	r22, r16
     71a:	41 e0       	ldi	r20, 0x01	; 1
     71c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	//local array for the ascii values of keypad
	uint8 LOC_KYP_ARR[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	uint8 LOC_row , LOC_col; // counters for the loops
	uint8 LOC_ReadX = 1;
	uint8 Return_Value = NOT_PRESSED; //value to be returned
	for(LOC_row = 0 ; LOC_row < 4 ; LOC_row++)
     720:	0f 5f       	subi	r16, 0xFF	; 255
     722:	04 30       	cpi	r16, 0x04	; 4
     724:	51 f6       	brne	.-108    	; 0x6ba <KYP_u8CheckPress+0x2c>
     726:	1f ef       	ldi	r17, 0xFF	; 255
     728:	ea cf       	rjmp	.-44     	; 0x6fe <KYP_u8CheckPress+0x70>

0000072a <LCD_vEnable>:
}


static void LCD_vEnable(void)
{
	DIO_vWritePin(LCD_PORT_CONTROL,EN,HIGH);
     72a:	81 e4       	ldi	r24, 0x41	; 65
     72c:	66 e0       	ldi	r22, 0x06	; 6
     72e:	41 e0       	ldi	r20, 0x01	; 1
     730:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     734:	8f e9       	ldi	r24, 0x9F	; 159
     736:	9f e0       	ldi	r25, 0x0F	; 15
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	f1 f7       	brne	.-4      	; 0x738 <LCD_vEnable+0xe>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <LCD_vEnable+0x14>
     73e:	00 00       	nop
	_delay_ms(2);
	DIO_vWritePin(LCD_PORT_CONTROL,EN,LOW);
     740:	81 e4       	ldi	r24, 0x41	; 65
     742:	66 e0       	ldi	r22, 0x06	; 6
     744:	40 e0       	ldi	r20, 0x00	; 0
     746:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
     74a:	8f e9       	ldi	r24, 0x9F	; 159
     74c:	9f e0       	ldi	r25, 0x0F	; 15
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <LCD_vEnable+0x24>
     752:	00 c0       	rjmp	.+0      	; 0x754 <LCD_vEnable+0x2a>
     754:	00 00       	nop
	_delay_ms(2);
}
     756:	08 95       	ret

00000758 <LCD_vSendCmd>:
	#endif
}


void LCD_vSendCmd(uint8 Copy_u8Command)
{
     758:	cf 93       	push	r28
     75a:	c8 2f       	mov	r28, r24
	DIO_vWritePort(LCD_PORT_DATA,Copy_u8Command); //send the command to the LCD through the MCU pins
	DIO_vWritePin(LCD_PORT_CONTROL,RS,LOW);       //choose to write a command (RS = 0)
	LCD_vEnable(); //send the enable pulse
	#elif defined FOUR_BIT_MODE
	//send the higher bits to the LCD four pins
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN   , READ_BIT(Copy_u8Command,4));
     75c:	48 2f       	mov	r20, r24
     75e:	42 95       	swap	r20
     760:	4f 70       	andi	r20, 0x0F	; 15
     762:	41 70       	andi	r20, 0x01	; 1
     764:	81 e4       	ldi	r24, 0x41	; 65
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+1 , READ_BIT(Copy_u8Command,5));
     76c:	4c 2f       	mov	r20, r28
     76e:	42 95       	swap	r20
     770:	46 95       	lsr	r20
     772:	47 70       	andi	r20, 0x07	; 7
     774:	41 70       	andi	r20, 0x01	; 1
     776:	81 e4       	ldi	r24, 0x41	; 65
     778:	61 e0       	ldi	r22, 0x01	; 1
     77a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+2 , READ_BIT(Copy_u8Command,6));
     77e:	4c 2f       	mov	r20, r28
     780:	42 95       	swap	r20
     782:	46 95       	lsr	r20
     784:	46 95       	lsr	r20
     786:	43 70       	andi	r20, 0x03	; 3
     788:	41 70       	andi	r20, 0x01	; 1
     78a:	81 e4       	ldi	r24, 0x41	; 65
     78c:	62 e0       	ldi	r22, 0x02	; 2
     78e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+3 , READ_BIT(Copy_u8Command,7));
     792:	4c 2f       	mov	r20, r28
     794:	44 1f       	adc	r20, r20
     796:	44 27       	eor	r20, r20
     798:	44 1f       	adc	r20, r20
     79a:	81 e4       	ldi	r24, 0x41	; 65
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_CONTROL,RS,LOW);       //choose to write a command (RS = 0)
     7a2:	81 e4       	ldi	r24, 0x41	; 65
     7a4:	64 e0       	ldi	r22, 0x04	; 4
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	LCD_vEnable(); //send the enable pulse
     7ac:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vEnable>
	//send the lower bits to the LCD four pins
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN   , READ_BIT(Copy_u8Command,0));
     7b0:	4c 2f       	mov	r20, r28
     7b2:	41 70       	andi	r20, 0x01	; 1
     7b4:	81 e4       	ldi	r24, 0x41	; 65
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+1 , READ_BIT(Copy_u8Command,1));
     7bc:	4c 2f       	mov	r20, r28
     7be:	46 95       	lsr	r20
     7c0:	41 70       	andi	r20, 0x01	; 1
     7c2:	81 e4       	ldi	r24, 0x41	; 65
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+2 , READ_BIT(Copy_u8Command,2));
     7ca:	4c 2f       	mov	r20, r28
     7cc:	46 95       	lsr	r20
     7ce:	46 95       	lsr	r20
     7d0:	41 70       	andi	r20, 0x01	; 1
     7d2:	81 e4       	ldi	r24, 0x41	; 65
     7d4:	62 e0       	ldi	r22, 0x02	; 2
     7d6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+3 , READ_BIT(Copy_u8Command,3));
     7da:	c6 95       	lsr	r28
     7dc:	c6 95       	lsr	r28
     7de:	c6 95       	lsr	r28
     7e0:	4c 2f       	mov	r20, r28
     7e2:	41 70       	andi	r20, 0x01	; 1
     7e4:	81 e4       	ldi	r24, 0x41	; 65
     7e6:	63 e0       	ldi	r22, 0x03	; 3
     7e8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_CONTROL,RS,LOW);       //choose to write a command (RS = 0)
     7ec:	81 e4       	ldi	r24, 0x41	; 65
     7ee:	64 e0       	ldi	r22, 0x04	; 4
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	LCD_vEnable(); //send the enable pulse
     7f6:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vEnable>
	#endif
}
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <LCD_vInit>:
     7fe:	8f e7       	ldi	r24, 0x7F	; 127
     800:	99 ea       	ldi	r25, 0xA9	; 169
     802:	a3 e0       	ldi	r26, 0x03	; 3
     804:	81 50       	subi	r24, 0x01	; 1
     806:	90 40       	sbci	r25, 0x00	; 0
     808:	a0 40       	sbci	r26, 0x00	; 0
     80a:	e1 f7       	brne	.-8      	; 0x804 <LCD_vInit+0x6>
     80c:	00 c0       	rjmp	.+0      	; 0x80e <LCD_vInit+0x10>
     80e:	00 00       	nop
	_delay_ms(10);
	LCD_vSendCmd(ENTRY_MODE);
	_delay_ms(1);
	#elif defined FOUR_BIT_MODE
	//set the 4 pins direction
	DIO_vSetPinDir(LCD_PORT_DATA , FOUR_BIT_START_PIN   , PIN_OUTPUT);
     810:	81 e4       	ldi	r24, 0x41	; 65
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	41 e0       	ldi	r20, 0x01	; 1
     816:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT_DATA , FOUR_BIT_START_PIN+1 , PIN_OUTPUT);
     81a:	81 e4       	ldi	r24, 0x41	; 65
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	41 e0       	ldi	r20, 0x01	; 1
     820:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT_DATA , FOUR_BIT_START_PIN+2 , PIN_OUTPUT);
     824:	81 e4       	ldi	r24, 0x41	; 65
     826:	62 e0       	ldi	r22, 0x02	; 2
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT_DATA , FOUR_BIT_START_PIN+3 , PIN_OUTPUT);
     82e:	81 e4       	ldi	r24, 0x41	; 65
     830:	63 e0       	ldi	r22, 0x03	; 3
     832:	41 e0       	ldi	r20, 0x01	; 1
     834:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	//set enable pins direction
	DIO_vSetPinDir(LCD_PORT_CONTROL,RS,PIN_OUTPUT);
     838:	81 e4       	ldi	r24, 0x41	; 65
     83a:	64 e0       	ldi	r22, 0x04	; 4
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT_CONTROL,RW,PIN_OUTPUT);
     842:	81 e4       	ldi	r24, 0x41	; 65
     844:	65 e0       	ldi	r22, 0x05	; 5
     846:	41 e0       	ldi	r20, 0x01	; 1
     848:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT_CONTROL,EN,PIN_OUTPUT);
     84c:	81 e4       	ldi	r24, 0x41	; 65
     84e:	66 e0       	ldi	r22, 0x06	; 6
     850:	41 e0       	ldi	r20, 0x01	; 1
     852:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	/*set RW pin to the Write mode*/
	DIO_vWritePin(LCD_PORT_CONTROL,RW,LOW);
     856:	81 e4       	ldi	r24, 0x41	; 65
     858:	65 e0       	ldi	r22, 0x05	; 5
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	/* Sending commands to the LCD */
	LCD_vSendCmd(RETURN_HOME);
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	0e 94 ac 03 	call	0x758	; 0x758 <LCD_vSendCmd>
     866:	af e1       	ldi	r26, 0x1F	; 31
     868:	be e4       	ldi	r27, 0x4E	; 78
     86a:	11 97       	sbiw	r26, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <__stack+0xb>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <__stack+0x11>
     870:	00 00       	nop
	_delay_ms(10);
	LCD_vSendCmd(FOUR_BIT);
     872:	88 e2       	ldi	r24, 0x28	; 40
     874:	0e 94 ac 03 	call	0x758	; 0x758 <LCD_vSendCmd>
     878:	8f ec       	ldi	r24, 0xCF	; 207
     87a:	97 e0       	ldi	r25, 0x07	; 7
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <__stack+0x1d>
     880:	00 c0       	rjmp	.+0      	; 0x882 <__stack+0x23>
     882:	00 00       	nop
	_delay_ms(1);
	LCD_vSendCmd(DISPLAY_ON_CURSOR_OFF);
     884:	8c e0       	ldi	r24, 0x0C	; 12
     886:	0e 94 ac 03 	call	0x758	; 0x758 <LCD_vSendCmd>
     88a:	af ec       	ldi	r26, 0xCF	; 207
     88c:	b7 e0       	ldi	r27, 0x07	; 7
     88e:	11 97       	sbiw	r26, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <__stack+0x2f>
     892:	00 c0       	rjmp	.+0      	; 0x894 <__stack+0x35>
     894:	00 00       	nop
	_delay_ms(1);
	LCD_vSendCmd(CLR_SCREEN);
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	0e 94 ac 03 	call	0x758	; 0x758 <LCD_vSendCmd>
     89c:	8f e1       	ldi	r24, 0x1F	; 31
     89e:	9e e4       	ldi	r25, 0x4E	; 78
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <__stack+0x41>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <__stack+0x47>
     8a6:	00 00       	nop
	_delay_ms(10);
	LCD_vSendCmd(ENTRY_MODE);
     8a8:	86 e0       	ldi	r24, 0x06	; 6
     8aa:	0e 94 ac 03 	call	0x758	; 0x758 <LCD_vSendCmd>
     8ae:	af ec       	ldi	r26, 0xCF	; 207
     8b0:	b7 e0       	ldi	r27, 0x07	; 7
     8b2:	11 97       	sbiw	r26, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <__stack+0x53>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <__stack+0x59>
     8b8:	00 00       	nop
	_delay_ms(1);
	#endif
}
     8ba:	08 95       	ret

000008bc <LCD_vSendData>:
	#endif
}


void LCD_vSendData(uint8 Copy_u8Data)
{
     8bc:	cf 93       	push	r28
     8be:	c8 2f       	mov	r28, r24
	#if defined EIGHT_BIT_MODE
	DIO_vWritePort(LCD_PORT_DATA,Copy_u8Data); // send the data to the LCD through the MCU pins
	DIO_vWritePin(LCD_PORT_CONTROL,RS,HIGH);   // choose to write a data (RS = 1)
	LCD_vEnable(); // send the enable pulse
	#elif defined FOUR_BIT_MODE
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN   , READ_BIT(Copy_u8Data,4));
     8c0:	48 2f       	mov	r20, r24
     8c2:	42 95       	swap	r20
     8c4:	4f 70       	andi	r20, 0x0F	; 15
     8c6:	41 70       	andi	r20, 0x01	; 1
     8c8:	81 e4       	ldi	r24, 0x41	; 65
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+1 , READ_BIT(Copy_u8Data,5));
     8d0:	4c 2f       	mov	r20, r28
     8d2:	42 95       	swap	r20
     8d4:	46 95       	lsr	r20
     8d6:	47 70       	andi	r20, 0x07	; 7
     8d8:	41 70       	andi	r20, 0x01	; 1
     8da:	81 e4       	ldi	r24, 0x41	; 65
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+2 , READ_BIT(Copy_u8Data,6));
     8e2:	4c 2f       	mov	r20, r28
     8e4:	42 95       	swap	r20
     8e6:	46 95       	lsr	r20
     8e8:	46 95       	lsr	r20
     8ea:	43 70       	andi	r20, 0x03	; 3
     8ec:	41 70       	andi	r20, 0x01	; 1
     8ee:	81 e4       	ldi	r24, 0x41	; 65
     8f0:	62 e0       	ldi	r22, 0x02	; 2
     8f2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+3 , READ_BIT(Copy_u8Data,7));
     8f6:	4c 2f       	mov	r20, r28
     8f8:	44 1f       	adc	r20, r20
     8fa:	44 27       	eor	r20, r20
     8fc:	44 1f       	adc	r20, r20
     8fe:	81 e4       	ldi	r24, 0x41	; 65
     900:	63 e0       	ldi	r22, 0x03	; 3
     902:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_CONTROL,RS,HIGH);       // choose to write a data (RS = 1)
     906:	81 e4       	ldi	r24, 0x41	; 65
     908:	64 e0       	ldi	r22, 0x04	; 4
     90a:	41 e0       	ldi	r20, 0x01	; 1
     90c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	LCD_vEnable(); // send the enable pulse
     910:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vEnable>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN   , READ_BIT(Copy_u8Data,0));
     914:	4c 2f       	mov	r20, r28
     916:	41 70       	andi	r20, 0x01	; 1
     918:	81 e4       	ldi	r24, 0x41	; 65
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+1 , READ_BIT(Copy_u8Data,1));
     920:	4c 2f       	mov	r20, r28
     922:	46 95       	lsr	r20
     924:	41 70       	andi	r20, 0x01	; 1
     926:	81 e4       	ldi	r24, 0x41	; 65
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+2 , READ_BIT(Copy_u8Data,2));
     92e:	4c 2f       	mov	r20, r28
     930:	46 95       	lsr	r20
     932:	46 95       	lsr	r20
     934:	41 70       	andi	r20, 0x01	; 1
     936:	81 e4       	ldi	r24, 0x41	; 65
     938:	62 e0       	ldi	r22, 0x02	; 2
     93a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+3 , READ_BIT(Copy_u8Data,3));
     93e:	c6 95       	lsr	r28
     940:	c6 95       	lsr	r28
     942:	c6 95       	lsr	r28
     944:	4c 2f       	mov	r20, r28
     946:	41 70       	andi	r20, 0x01	; 1
     948:	81 e4       	ldi	r24, 0x41	; 65
     94a:	63 e0       	ldi	r22, 0x03	; 3
     94c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_CONTROL,RS,HIGH);       //choose to write a command (RS = 1)
     950:	81 e4       	ldi	r24, 0x41	; 65
     952:	64 e0       	ldi	r22, 0x04	; 4
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	LCD_vEnable(); //send the enable pulse
     95a:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vEnable>
	#endif
}
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <LCD_vClearScreen>:
}


void LCD_vClearScreen(void)
{
	LCD_vSendCmd(CLR_SCREEN);//send clear command to LCD
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	0e 94 ac 03 	call	0x758	; 0x758 <LCD_vSendCmd>
}
     968:	08 95       	ret

0000096a <LCD_vMoveCursor>:

void LCD_vMoveCursor(uint8 Copy_u8Row , uint8 Copy_u8Col)
{
	uint8 LOC_Cmd;
	//check if the input parameters are out of range
	if(Copy_u8Row>2 || Copy_u8Col>16 || Copy_u8Col==0 ||Copy_u8Row==0)
     96a:	83 30       	cpi	r24, 0x03	; 3
     96c:	80 f4       	brcc	.+32     	; 0x98e <LCD_vMoveCursor+0x24>
     96e:	61 31       	cpi	r22, 0x11	; 17
     970:	80 f4       	brcc	.+32     	; 0x992 <LCD_vMoveCursor+0x28>
     972:	66 23       	and	r22, r22
     974:	81 f0       	breq	.+32     	; 0x996 <LCD_vMoveCursor+0x2c>
     976:	88 23       	and	r24, r24
     978:	81 f0       	breq	.+32     	; 0x99a <LCD_vMoveCursor+0x30>
	{
		LOC_Cmd = ROW1_START; // 1st row and 1st col
	}
	else if(Copy_u8Row == 1)
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	19 f4       	brne	.+6      	; 0x984 <LCD_vMoveCursor+0x1a>
	{
		LOC_Cmd = ROW1_START + Copy_u8Col - 1; //add the col offset to the row1 start command 
     97e:	96 2f       	mov	r25, r22
     980:	91 58       	subi	r25, 0x81	; 129
     982:	0c c0       	rjmp	.+24     	; 0x99c <LCD_vMoveCursor+0x32>
	}
	else if(Copy_u8Row == 2)
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	51 f4       	brne	.+20     	; 0x99c <LCD_vMoveCursor+0x32>
	{
		LOC_Cmd = ROW2_START + Copy_u8Col - 1; //add the col offset to the row2 start command 
     988:	96 2f       	mov	r25, r22
     98a:	91 54       	subi	r25, 0x41	; 65
     98c:	07 c0       	rjmp	.+14     	; 0x99c <LCD_vMoveCursor+0x32>
{
	uint8 LOC_Cmd;
	//check if the input parameters are out of range
	if(Copy_u8Row>2 || Copy_u8Col>16 || Copy_u8Col==0 ||Copy_u8Row==0)
	{
		LOC_Cmd = ROW1_START; // 1st row and 1st col
     98e:	90 e8       	ldi	r25, 0x80	; 128
     990:	05 c0       	rjmp	.+10     	; 0x99c <LCD_vMoveCursor+0x32>
     992:	90 e8       	ldi	r25, 0x80	; 128
     994:	03 c0       	rjmp	.+6      	; 0x99c <LCD_vMoveCursor+0x32>
     996:	90 e8       	ldi	r25, 0x80	; 128
     998:	01 c0       	rjmp	.+2      	; 0x99c <LCD_vMoveCursor+0x32>
     99a:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if(Copy_u8Row == 2)
	{
		LOC_Cmd = ROW2_START + Copy_u8Col - 1; //add the col offset to the row2 start command 
	}
	LCD_vSendCmd(LOC_Cmd);
     99c:	89 2f       	mov	r24, r25
     99e:	0e 94 ac 03 	call	0x758	; 0x758 <LCD_vSendCmd>
}
     9a2:	08 95       	ret

000009a4 <LCD_vSendString>:


void LCD_vSendString(uint8* Copy_u8Data)
{
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	ec 01       	movw	r28, r24
	//check the end of the string
	while(*Copy_u8Data != '\0')
     9aa:	88 81       	ld	r24, Y
     9ac:	88 23       	and	r24, r24
     9ae:	31 f0       	breq	.+12     	; 0x9bc <LCD_vSendString+0x18>
	}
	LCD_vSendCmd(LOC_Cmd);
}


void LCD_vSendString(uint8* Copy_u8Data)
     9b0:	21 96       	adiw	r28, 0x01	; 1
{
	//check the end of the string
	while(*Copy_u8Data != '\0')
	{
		LCD_vSendData(*Copy_u8Data); //send the current character
     9b2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSendData>


void LCD_vSendString(uint8* Copy_u8Data)
{
	//check the end of the string
	while(*Copy_u8Data != '\0')
     9b6:	89 91       	ld	r24, Y+
     9b8:	88 23       	and	r24, r24
     9ba:	d9 f7       	brne	.-10     	; 0x9b2 <LCD_vSendString+0xe>
	{
		LCD_vSendData(*Copy_u8Data); //send the current character
		Copy_u8Data++;               //increment to get the next address of the next char
	}
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <LCD_vSendNumber>:

void LCD_vSendNumber(uint16 Copy_u16Number)
{
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
     9cc:	28 97       	sbiw	r28, 0x08	; 8
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
	sint8 i=0;// counter
	uint8 LOC_arr[8];//array holding numbers
	if(Copy_u16Number/10 == 0)
     9d8:	8a 30       	cpi	r24, 0x0A	; 10
     9da:	91 05       	cpc	r25, r1
     9dc:	18 f0       	brcs	.+6      	; 0x9e4 <LCD_vSendNumber+0x22>
	{
		LCD_vSendData(Copy_u16Number+48);
	}
	else
	{
		while(Copy_u16Number != 0)
     9de:	00 97       	sbiw	r24, 0x00	; 0
     9e0:	29 f4       	brne	.+10     	; 0x9ec <LCD_vSendNumber+0x2a>
     9e2:	2d c0       	rjmp	.+90     	; 0xa3e <LCD_vSendNumber+0x7c>
{
	sint8 i=0;// counter
	uint8 LOC_arr[8];//array holding numbers
	if(Copy_u16Number/10 == 0)
	{
		LCD_vSendData(Copy_u16Number+48);
     9e4:	80 5d       	subi	r24, 0xD0	; 208
     9e6:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSendData>
     9ea:	29 c0       	rjmp	.+82     	; 0xa3e <LCD_vSendNumber+0x7c>
	}
	else
	{
		while(Copy_u16Number != 0)
     9ec:	10 e0       	ldi	r17, 0x00	; 0
		{
			LOC_arr[i]=Copy_u16Number%10;
     9ee:	2a e0       	ldi	r18, 0x0A	; 10
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	e1 2f       	mov	r30, r17
     9f4:	ff 27       	eor	r31, r31
     9f6:	e7 fd       	sbrc	r30, 7
     9f8:	f0 95       	com	r31
     9fa:	41 e0       	ldi	r20, 0x01	; 1
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	4c 0f       	add	r20, r28
     a00:	5d 1f       	adc	r21, r29
     a02:	e4 0f       	add	r30, r20
     a04:	f5 1f       	adc	r31, r21
     a06:	b9 01       	movw	r22, r18
     a08:	0e 94 de 09 	call	0x13bc	; 0x13bc <__udivmodhi4>
     a0c:	80 83       	st	Z, r24
			Copy_u16Number = Copy_u16Number / 10;
     a0e:	86 2f       	mov	r24, r22
     a10:	97 2f       	mov	r25, r23
			i++;
     a12:	1f 5f       	subi	r17, 0xFF	; 255
	{
		LCD_vSendData(Copy_u16Number+48);
	}
	else
	{
		while(Copy_u16Number != 0)
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	69 f7       	brne	.-38     	; 0x9f2 <LCD_vSendNumber+0x30>
		{
			LOC_arr[i]=Copy_u16Number%10;
			Copy_u16Number = Copy_u16Number / 10;
			i++;
		}
		while(i > 0)
     a18:	11 16       	cp	r1, r17
     a1a:	8c f4       	brge	.+34     	; 0xa3e <LCD_vSendNumber+0x7c>
		{
			i--;
     a1c:	11 50       	subi	r17, 0x01	; 1
			LCD_vSendData(LOC_arr[i]+48);
     a1e:	e1 2f       	mov	r30, r17
     a20:	ff 27       	eor	r31, r31
     a22:	e7 fd       	sbrc	r30, 7
     a24:	f0 95       	com	r31
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	8c 0f       	add	r24, r28
     a2c:	9d 1f       	adc	r25, r29
     a2e:	e8 0f       	add	r30, r24
     a30:	f9 1f       	adc	r31, r25
     a32:	80 81       	ld	r24, Z
     a34:	80 5d       	subi	r24, 0xD0	; 208
     a36:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSendData>
		{
			LOC_arr[i]=Copy_u16Number%10;
			Copy_u16Number = Copy_u16Number / 10;
			i++;
		}
		while(i > 0)
     a3a:	11 23       	and	r17, r17
     a3c:	79 f7       	brne	.-34     	; 0xa1c <LCD_vSendNumber+0x5a>
		{
			i--;
			LCD_vSendData(LOC_arr[i]+48);
		}
	}
     a3e:	28 96       	adiw	r28, 0x08	; 8
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	08 95       	ret

00000a52 <LED_vInit>:
#include "STD_types.h"
#include "DIO_interface.h"

void LED_vInit(uint8 Copy_u8Port,uint8 Copy_u8Pin)
{
	DIO_vSetPinDir(Copy_u8Port,Copy_u8Pin,1); //set direction to 1 (output)
     a52:	41 e0       	ldi	r20, 0x01	; 1
     a54:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
}
     a58:	08 95       	ret

00000a5a <LED_vSwitchON>:

void LED_vSwitchON(uint8 Copy_u8Port , uint8 Copy_u8Pin)
{
	DIO_vWritePin(Copy_u8Port,Copy_u8Pin,1); //put value = 1 to let the led ON
     a5a:	41 e0       	ldi	r20, 0x01	; 1
     a5c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
}
     a60:	08 95       	ret

00000a62 <LED_vSwitchOFF>:

void LED_vSwitchOFF(uint8 Copy_u8Port , uint8 Copy_u8Pin)
{
	DIO_vWritePin(Copy_u8Port,Copy_u8Pin,0); //put value = 0 to let the led OFF
     a62:	40 e0       	ldi	r20, 0x00	; 0
     a64:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
}
     a68:	08 95       	ret

00000a6a <LED_vToggle>:

void LED_vToggle(uint8 Copy_u8Port , uint8 Copy_u8Pin)
{
	DIO_vTogglePin(Copy_u8Port,Copy_u8Pin); //toggle the current bit of the pin
     a6a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_vTogglePin>
}
     a6e:	08 95       	ret

00000a70 <LED_vReadStatus>:

uint8 LED_vReadStatus (uint8 Copy_u8Port , uint8 Copy_u8Pin)
{
	return DIO_u8ReadPin(Copy_u8Port,Copy_u8Pin); //read pin value
     a70:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_u8ReadPin>
     a74:	08 95       	ret

00000a76 <TMR0_ISR>:
volatile uint8  TMR_hours    = 0;
volatile uint8 user_mode = 0;

void TMR0_ISR(void)
{
	TMR0_counter++;
     a76:	80 91 1a 01 	lds	r24, 0x011A
     a7a:	90 91 1b 01 	lds	r25, 0x011B
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	90 93 1b 01 	sts	0x011B, r25
     a84:	80 93 1a 01 	sts	0x011A, r24
	if(TMR0_counter>=6)
     a88:	80 91 1a 01 	lds	r24, 0x011A
     a8c:	90 91 1b 01 	lds	r25, 0x011B
     a90:	86 30       	cpi	r24, 0x06	; 6
     a92:	91 05       	cpc	r25, r1
     a94:	20 f0       	brcs	.+8      	; 0xa9e <TMR0_ISR+0x28>
	{
		TMR0_counter=0;
     a96:	10 92 1b 01 	sts	0x011B, r1
     a9a:	10 92 1a 01 	sts	0x011A, r1
     a9e:	08 95       	ret

00000aa0 <TMR2_ISR>:
	}
}

void TMR2_ISR(void)
{
	if(user_mode == 0 || user_mode == 2)
     aa0:	80 91 16 01 	lds	r24, 0x0116
     aa4:	88 23       	and	r24, r24
     aa6:	21 f0       	breq	.+8      	; 0xab0 <TMR2_ISR+0x10>
     aa8:	80 91 16 01 	lds	r24, 0x0116
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	31 f4       	brne	.+12     	; 0xabc <TMR2_ISR+0x1c>
	{
		TMR_seconds++;
     ab0:	80 91 19 01 	lds	r24, 0x0119
     ab4:	8f 5f       	subi	r24, 0xFF	; 255
     ab6:	80 93 19 01 	sts	0x0119, r24
     aba:	08 95       	ret
	}
	else if(user_mode == 1)
     abc:	80 91 16 01 	lds	r24, 0x0116
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	29 f4       	brne	.+10     	; 0xace <TMR2_ISR+0x2e>
	{
		TMR_seconds--;
     ac4:	80 91 19 01 	lds	r24, 0x0119
     ac8:	81 50       	subi	r24, 0x01	; 1
     aca:	80 93 19 01 	sts	0x0119, r24
     ace:	08 95       	ret

00000ad0 <main>:
int main(void)
{
	uint8 press = NOT_PRESSED;
	uint8 timer;
	/* Initializations */
	LCD_vInit();
     ad0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_vInit>
	KYP_vInit();
     ad4:	0e 94 1a 03 	call	0x634	; 0x634 <KYP_vInit>
	SEVSEG_vInit('D');
     ad8:	84 e4       	ldi	r24, 0x44	; 68
     ada:	0e 94 c4 08 	call	0x1188	; 0x1188 <SEVSEG_vInit>
	SEVSEG_vEnableInit('C',0);
     ade:	83 e4       	ldi	r24, 0x43	; 67
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <SEVSEG_vEnableInit>
	SEVSEG_vEnableInit('C',1);
     ae6:	83 e4       	ldi	r24, 0x43	; 67
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <SEVSEG_vEnableInit>
	SEVSEG_vEnableInit('C',2);
     aee:	83 e4       	ldi	r24, 0x43	; 67
     af0:	62 e0       	ldi	r22, 0x02	; 2
     af2:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <SEVSEG_vEnableInit>
	SEVSEG_vEnableInit('C',3);
     af6:	83 e4       	ldi	r24, 0x43	; 67
     af8:	63 e0       	ldi	r22, 0x03	; 3
     afa:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <SEVSEG_vEnableInit>
	SEVSEG_vEnableInit('C',4);
     afe:	83 e4       	ldi	r24, 0x43	; 67
     b00:	64 e0       	ldi	r22, 0x04	; 4
     b02:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <SEVSEG_vEnableInit>
	SEVSEG_vEnableInit('C',5);
     b06:	83 e4       	ldi	r24, 0x43	; 67
     b08:	65 e0       	ldi	r22, 0x05	; 5
     b0a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <SEVSEG_vEnableInit>
	
	/* Initialze a LED */
	LED_vInit('A',7);
     b0e:	81 e4       	ldi	r24, 0x41	; 65
     b10:	67 e0       	ldi	r22, 0x07	; 7
     b12:	0e 94 29 05 	call	0xa52	; 0xa52 <LED_vInit>
	
	TMR0_vInit();
     b16:	0e 94 04 09 	call	0x1208	; 0x1208 <TMR0_vInit>
	TMR0_COMP_SetCallBack(TMR0_ISR);
     b1a:	8b e3       	ldi	r24, 0x3B	; 59
     b1c:	95 e0       	ldi	r25, 0x05	; 5
     b1e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <TMR0_COMP_SetCallBack>

	TMR2_vInit();
     b22:	0e 94 71 09 	call	0x12e2	; 0x12e2 <TMR2_vInit>
	TMR2_OVF_SetCallBack(TMR2_ISR);
     b26:	80 e5       	ldi	r24, 0x50	; 80
     b28:	95 e0       	ldi	r25, 0x05	; 5
     b2a:	0e 94 67 09 	call	0x12ce	; 0x12ce <TMR2_OVF_SetCallBack>
	
	
    while(1)
    {
		LCD_vClearScreen();
        LCD_vSendString("1:Clock  2:Timer");
     b2e:	0f 2e       	mov	r0, r31
     b30:	f0 e7       	ldi	r31, 0x70	; 112
     b32:	af 2e       	mov	r10, r31
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	bf 2e       	mov	r11, r31
     b38:	f0 2d       	mov	r31, r0
	       	else               // timer
	       	{
	        	user_mode=1;
	       	}
	       	do{
	        	LCD_vSendString("Set Hour: ");
     b3a:	0e e8       	ldi	r16, 0x8E	; 142
     b3c:	10 e0       	ldi	r17, 0x00	; 0
	        	}
	       	}while(TMR_hours>=24);
	       	
	       	do{
	        	LCD_vMoveCursor(2,1);
	        	LCD_vSendString("Set Mins: ");
     b3e:	0f 2e       	mov	r0, r31
     b40:	f3 eb       	ldi	r31, 0xB3	; 179
     b42:	ef 2e       	mov	r14, r31
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	ff 2e       	mov	r15, r31
     b48:	f0 2d       	mov	r31, r0
					LCD_vSendData('0');
				}
				LCD_vSendNumber(TMR_minutes);
				do{
					LCD_vMoveCursor(2,1);
					LCD_vSendString("Set Secs: ");
     b4a:	0f 2e       	mov	r0, r31
     b4c:	fc ec       	ldi	r31, 0xCC	; 204
     b4e:	2f 2e       	mov	r2, r31
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	3f 2e       	mov	r3, r31
     b54:	f0 2d       	mov	r31, r0
					_delay_ms(150);
					timer = timer + (press-48);
					if(timer>=60)
					{
						LCD_vClearScreen();
						LCD_vSendString("Unavailable");
     b56:	0f 2e       	mov	r0, r31
     b58:	f9 e9       	ldi	r31, 0x99	; 153
     b5a:	cf 2e       	mov	r12, r31
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	df 2e       	mov	r13, r31
     b60:	f0 2d       	mov	r31, r0
						LCD_vMoveCursor(2,1);
						LCD_vSendString("From 00 -> 59");
     b62:	0f 2e       	mov	r0, r31
     b64:	fe eb       	ldi	r31, 0xBE	; 190
     b66:	6f 2e       	mov	r6, r31
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	7f 2e       	mov	r7, r31
     b6c:	f0 2d       	mov	r31, r0
	        	if(TMR_hours>=24)
	        	{
		        	LCD_vClearScreen();
		        	LCD_vSendString("Unavailable");
		        	LCD_vMoveCursor(2,1);
		        	LCD_vSendString("From 00 -> 23");
     b6e:	0f 2e       	mov	r0, r31
     b70:	f5 ea       	ldi	r31, 0xA5	; 165
     b72:	4f 2e       	mov	r4, r31
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	5f 2e       	mov	r5, r31
     b78:	f0 2d       	mov	r31, r0
	TMR2_OVF_SetCallBack(TMR2_ISR);
	
	
    while(1)
    {
		LCD_vClearScreen();
     b7a:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_vClearScreen>
        LCD_vSendString("1:Clock  2:Timer");
     b7e:	c5 01       	movw	r24, r10
     b80:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
       	LCD_vMoveCursor(2,1);
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vMoveCursor>
       	LCD_vSendString("3:Stop Watch");
     b8c:	81 e8       	ldi	r24, 0x81	; 129
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
       	
       	do
       	{
	       	press = KYP_u8CheckPress();
     b94:	0e 94 47 03 	call	0x68e	; 0x68e <KYP_u8CheckPress>
     b98:	c8 2f       	mov	r28, r24
     b9a:	8f e7       	ldi	r24, 0x7F	; 127
     b9c:	99 ea       	ldi	r25, 0xA9	; 169
     b9e:	a3 e0       	ldi	r26, 0x03	; 3
     ba0:	81 50       	subi	r24, 0x01	; 1
     ba2:	90 40       	sbci	r25, 0x00	; 0
     ba4:	a0 40       	sbci	r26, 0x00	; 0
     ba6:	e1 f7       	brne	.-8      	; 0xba0 <main+0xd0>
     ba8:	00 c0       	rjmp	.+0      	; 0xbaa <main+0xda>
     baa:	00 00       	nop
	       	_delay_ms(150);
       	} while (press != '1' && press != '2' && press != '3');
     bac:	dc 2f       	mov	r29, r28
     bae:	d1 53       	subi	r29, 0x31	; 49
     bb0:	d3 30       	cpi	r29, 0x03	; 3
     bb2:	80 f7       	brcc	.-32     	; 0xb94 <main+0xc4>
     bb4:	8f e7       	ldi	r24, 0x7F	; 127
     bb6:	99 ea       	ldi	r25, 0xA9	; 169
     bb8:	a3 e0       	ldi	r26, 0x03	; 3
     bba:	81 50       	subi	r24, 0x01	; 1
     bbc:	90 40       	sbci	r25, 0x00	; 0
     bbe:	a0 40       	sbci	r26, 0x00	; 0
     bc0:	e1 f7       	brne	.-8      	; 0xbba <main+0xea>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <main+0xf4>
     bc4:	00 00       	nop
       	_delay_ms(150);
       	LCD_vClearScreen();
     bc6:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_vClearScreen>
       	if(press == '1' || press == '2')
     bca:	d2 30       	cpi	r29, 0x02	; 2
     bcc:	08 f0       	brcs	.+2      	; 0xbd0 <main+0x100>
     bce:	63 c1       	rjmp	.+710    	; 0xe96 <main+0x3c6>
       	{
	       	if(press == '1')	//clock
     bd0:	c1 33       	cpi	r28, 0x31	; 49
     bd2:	19 f4       	brne	.+6      	; 0xbda <main+0x10a>
	       	{
	        	user_mode=0;
     bd4:	10 92 16 01 	sts	0x0116, r1
     bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <main+0x110>
	       	}
	       	else               // timer
	       	{
	        	user_mode=1;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	80 93 16 01 	sts	0x0116, r24
	       	}
	       	do{
	        	LCD_vSendString("Set Hour: ");
     be0:	c8 01       	movw	r24, r16
     be2:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
	        	do{
		        	press = KYP_u8CheckPress();
     be6:	0e 94 47 03 	call	0x68e	; 0x68e <KYP_u8CheckPress>
     bea:	c8 2f       	mov	r28, r24
     bec:	8f e7       	ldi	r24, 0x7F	; 127
     bee:	99 ea       	ldi	r25, 0xA9	; 169
     bf0:	a3 e0       	ldi	r26, 0x03	; 3
     bf2:	81 50       	subi	r24, 0x01	; 1
     bf4:	90 40       	sbci	r25, 0x00	; 0
     bf6:	a0 40       	sbci	r26, 0x00	; 0
     bf8:	e1 f7       	brne	.-8      	; 0xbf2 <main+0x122>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <main+0x12c>
     bfc:	00 00       	nop
		        	_delay_ms(150);
	        	}while(press < '0' || press > '9');
     bfe:	8c 2f       	mov	r24, r28
     c00:	80 53       	subi	r24, 0x30	; 48
     c02:	8a 30       	cpi	r24, 0x0A	; 10
     c04:	80 f7       	brcc	.-32     	; 0xbe6 <main+0x116>
	        	LCD_vSendData(press);
     c06:	8c 2f       	mov	r24, r28
     c08:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSendData>
     c0c:	8f e7       	ldi	r24, 0x7F	; 127
     c0e:	99 ea       	ldi	r25, 0xA9	; 169
     c10:	a3 e0       	ldi	r26, 0x03	; 3
     c12:	81 50       	subi	r24, 0x01	; 1
     c14:	90 40       	sbci	r25, 0x00	; 0
     c16:	a0 40       	sbci	r26, 0x00	; 0
     c18:	e1 f7       	brne	.-8      	; 0xc12 <main+0x142>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <main+0x14c>
     c1c:	00 00       	nop
	        	_delay_ms(150);
	        	TMR_hours = 10*(press-48);
     c1e:	cc 0f       	add	r28, r28
     c20:	8c 2f       	mov	r24, r28
     c22:	88 0f       	add	r24, r24
     c24:	88 0f       	add	r24, r24
     c26:	c8 0f       	add	r28, r24
     c28:	c0 5e       	subi	r28, 0xE0	; 224
     c2a:	c0 93 17 01 	sts	0x0117, r28
	        	do{
		        	press = KYP_u8CheckPress();
     c2e:	0e 94 47 03 	call	0x68e	; 0x68e <KYP_u8CheckPress>
     c32:	c8 2f       	mov	r28, r24
     c34:	8f e7       	ldi	r24, 0x7F	; 127
     c36:	99 ea       	ldi	r25, 0xA9	; 169
     c38:	a3 e0       	ldi	r26, 0x03	; 3
     c3a:	81 50       	subi	r24, 0x01	; 1
     c3c:	90 40       	sbci	r25, 0x00	; 0
     c3e:	a0 40       	sbci	r26, 0x00	; 0
     c40:	e1 f7       	brne	.-8      	; 0xc3a <main+0x16a>
     c42:	00 c0       	rjmp	.+0      	; 0xc44 <main+0x174>
     c44:	00 00       	nop
		        	_delay_ms(150);
	        	}while(press < '0' || press > '9');
     c46:	8c 2f       	mov	r24, r28
     c48:	80 53       	subi	r24, 0x30	; 48
     c4a:	8a 30       	cpi	r24, 0x0A	; 10
     c4c:	80 f7       	brcc	.-32     	; 0xc2e <main+0x15e>
	        	LCD_vSendData(press);
     c4e:	8c 2f       	mov	r24, r28
     c50:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSendData>
     c54:	8f e7       	ldi	r24, 0x7F	; 127
     c56:	99 ea       	ldi	r25, 0xA9	; 169
     c58:	a3 e0       	ldi	r26, 0x03	; 3
     c5a:	81 50       	subi	r24, 0x01	; 1
     c5c:	90 40       	sbci	r25, 0x00	; 0
     c5e:	a0 40       	sbci	r26, 0x00	; 0
     c60:	e1 f7       	brne	.-8      	; 0xc5a <main+0x18a>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <main+0x194>
     c64:	00 00       	nop
	        	_delay_ms(150);
	        	TMR_hours = TMR_hours + (press-48);
     c66:	80 91 17 01 	lds	r24, 0x0117
     c6a:	80 53       	subi	r24, 0x30	; 48
     c6c:	c8 0f       	add	r28, r24
     c6e:	c0 93 17 01 	sts	0x0117, r28
	        	if(TMR_hours>=24)
     c72:	80 91 17 01 	lds	r24, 0x0117
     c76:	88 31       	cpi	r24, 0x18	; 24
     c78:	b8 f0       	brcs	.+46     	; 0xca8 <main+0x1d8>
	        	{
		        	LCD_vClearScreen();
     c7a:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_vClearScreen>
		        	LCD_vSendString("Unavailable");
     c7e:	c6 01       	movw	r24, r12
     c80:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
		        	LCD_vMoveCursor(2,1);
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vMoveCursor>
		        	LCD_vSendString("From 00 -> 23");
     c8c:	c2 01       	movw	r24, r4
     c8e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	99 e6       	ldi	r25, 0x69	; 105
     c96:	a8 e1       	ldi	r26, 0x18	; 24
     c98:	81 50       	subi	r24, 0x01	; 1
     c9a:	90 40       	sbci	r25, 0x00	; 0
     c9c:	a0 40       	sbci	r26, 0x00	; 0
     c9e:	e1 f7       	brne	.-8      	; 0xc98 <main+0x1c8>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <main+0x1d2>
     ca2:	00 00       	nop
		        	_delay_ms(1000);
		        	LCD_vClearScreen();
     ca4:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_vClearScreen>
	        	}
	       	}while(TMR_hours>=24);
     ca8:	80 91 17 01 	lds	r24, 0x0117
     cac:	88 31       	cpi	r24, 0x18	; 24
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <main+0x1e2>
     cb0:	97 cf       	rjmp	.-210    	; 0xbe0 <main+0x110>
	       	
	       	do{
	        	LCD_vMoveCursor(2,1);
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	61 e0       	ldi	r22, 0x01	; 1
     cb6:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vMoveCursor>
	        	LCD_vSendString("Set Mins: ");
     cba:	c7 01       	movw	r24, r14
     cbc:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
	        	do{
		        	press = KYP_u8CheckPress();
     cc0:	0e 94 47 03 	call	0x68e	; 0x68e <KYP_u8CheckPress>
     cc4:	c8 2f       	mov	r28, r24
     cc6:	8f e7       	ldi	r24, 0x7F	; 127
     cc8:	99 ea       	ldi	r25, 0xA9	; 169
     cca:	a3 e0       	ldi	r26, 0x03	; 3
     ccc:	81 50       	subi	r24, 0x01	; 1
     cce:	90 40       	sbci	r25, 0x00	; 0
     cd0:	a0 40       	sbci	r26, 0x00	; 0
     cd2:	e1 f7       	brne	.-8      	; 0xccc <main+0x1fc>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <main+0x206>
     cd6:	00 00       	nop
		        	_delay_ms(150);
	        	}while(press < '0' || press > '9');
     cd8:	8c 2f       	mov	r24, r28
     cda:	80 53       	subi	r24, 0x30	; 48
     cdc:	8a 30       	cpi	r24, 0x0A	; 10
     cde:	80 f7       	brcc	.-32     	; 0xcc0 <main+0x1f0>
	        	LCD_vSendData(press);
     ce0:	8c 2f       	mov	r24, r28
     ce2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSendData>
     ce6:	8f e7       	ldi	r24, 0x7F	; 127
     ce8:	99 ea       	ldi	r25, 0xA9	; 169
     cea:	a3 e0       	ldi	r26, 0x03	; 3
     cec:	81 50       	subi	r24, 0x01	; 1
     cee:	90 40       	sbci	r25, 0x00	; 0
     cf0:	a0 40       	sbci	r26, 0x00	; 0
     cf2:	e1 f7       	brne	.-8      	; 0xcec <main+0x21c>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <main+0x226>
     cf6:	00 00       	nop
	        	_delay_ms(150);
	        	TMR_minutes = 10*(press-48);
     cf8:	cc 0f       	add	r28, r28
     cfa:	8c 2f       	mov	r24, r28
     cfc:	88 0f       	add	r24, r24
     cfe:	88 0f       	add	r24, r24
     d00:	c8 0f       	add	r28, r24
     d02:	c0 5e       	subi	r28, 0xE0	; 224
     d04:	c0 93 18 01 	sts	0x0118, r28
	        	do{
		        	press = KYP_u8CheckPress();
     d08:	0e 94 47 03 	call	0x68e	; 0x68e <KYP_u8CheckPress>
     d0c:	c8 2f       	mov	r28, r24
     d0e:	8f e7       	ldi	r24, 0x7F	; 127
     d10:	99 ea       	ldi	r25, 0xA9	; 169
     d12:	a3 e0       	ldi	r26, 0x03	; 3
     d14:	81 50       	subi	r24, 0x01	; 1
     d16:	90 40       	sbci	r25, 0x00	; 0
     d18:	a0 40       	sbci	r26, 0x00	; 0
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <main+0x244>
     d1c:	00 c0       	rjmp	.+0      	; 0xd1e <main+0x24e>
     d1e:	00 00       	nop
		        	_delay_ms(150);
	        	}while(press < '0' || press > '9');
     d20:	8c 2f       	mov	r24, r28
     d22:	80 53       	subi	r24, 0x30	; 48
     d24:	8a 30       	cpi	r24, 0x0A	; 10
     d26:	80 f7       	brcc	.-32     	; 0xd08 <main+0x238>
	        	LCD_vSendData(press);
     d28:	8c 2f       	mov	r24, r28
     d2a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSendData>
     d2e:	8f e7       	ldi	r24, 0x7F	; 127
     d30:	99 ea       	ldi	r25, 0xA9	; 169
     d32:	a3 e0       	ldi	r26, 0x03	; 3
     d34:	81 50       	subi	r24, 0x01	; 1
     d36:	90 40       	sbci	r25, 0x00	; 0
     d38:	a0 40       	sbci	r26, 0x00	; 0
     d3a:	e1 f7       	brne	.-8      	; 0xd34 <main+0x264>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <main+0x26e>
     d3e:	00 00       	nop
	        	_delay_ms(150);
	        	TMR_minutes = TMR_minutes + (press-48);
     d40:	80 91 18 01 	lds	r24, 0x0118
     d44:	80 53       	subi	r24, 0x30	; 48
     d46:	c8 0f       	add	r28, r24
     d48:	c0 93 18 01 	sts	0x0118, r28
	        	if(TMR_minutes>=60)
     d4c:	80 91 18 01 	lds	r24, 0x0118
     d50:	8c 33       	cpi	r24, 0x3C	; 60
     d52:	30 f1       	brcs	.+76     	; 0xda0 <main+0x2d0>
	        	{
		        	LCD_vClearScreen();
     d54:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_vClearScreen>
		        	LCD_vSendString("Unavailable");
     d58:	c6 01       	movw	r24, r12
     d5a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
		        	LCD_vMoveCursor(2,1);
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vMoveCursor>
		        	LCD_vSendString("From 00 -> 59");
     d66:	c3 01       	movw	r24, r6
     d68:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	99 e6       	ldi	r25, 0x69	; 105
     d70:	a8 e1       	ldi	r26, 0x18	; 24
     d72:	81 50       	subi	r24, 0x01	; 1
     d74:	90 40       	sbci	r25, 0x00	; 0
     d76:	a0 40       	sbci	r26, 0x00	; 0
     d78:	e1 f7       	brne	.-8      	; 0xd72 <main+0x2a2>
     d7a:	00 c0       	rjmp	.+0      	; 0xd7c <main+0x2ac>
     d7c:	00 00       	nop
		        	_delay_ms(1000);
		        	LCD_vClearScreen();
     d7e:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_vClearScreen>
		        	LCD_vSendString("Set Hour: ");
     d82:	c8 01       	movw	r24, r16
     d84:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
		        	if(TMR_hours<10)
     d88:	80 91 17 01 	lds	r24, 0x0117
     d8c:	8a 30       	cpi	r24, 0x0A	; 10
     d8e:	18 f4       	brcc	.+6      	; 0xd96 <main+0x2c6>
		        	{
			        	LCD_vSendData('0');
     d90:	80 e3       	ldi	r24, 0x30	; 48
     d92:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSendData>
		        	}
		        	LCD_vSendNumber(TMR_hours);
     d96:	80 91 17 01 	lds	r24, 0x0117
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <LCD_vSendNumber>
	        	}
	       	}while(TMR_minutes>=60);
     da0:	80 91 18 01 	lds	r24, 0x0118
     da4:	8c 33       	cpi	r24, 0x3C	; 60
     da6:	08 f0       	brcs	.+2      	; 0xdaa <main+0x2da>
     da8:	84 cf       	rjmp	.-248    	; 0xcb2 <main+0x1e2>
			
			if(user_mode == 1)
     daa:	80 91 16 01 	lds	r24, 0x0116
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	09 f0       	breq	.+2      	; 0xdb4 <main+0x2e4>
     db2:	7a c0       	rjmp	.+244    	; 0xea8 <main+0x3d8>
			{
				LCD_vClearScreen();
     db4:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_vClearScreen>
				LCD_vSendString("Set Mins: ");
     db8:	c7 01       	movw	r24, r14
     dba:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>

				if(TMR_minutes<10)
     dbe:	80 91 18 01 	lds	r24, 0x0118
     dc2:	8a 30       	cpi	r24, 0x0A	; 10
     dc4:	18 f4       	brcc	.+6      	; 0xdcc <main+0x2fc>
				{
					LCD_vSendData('0');
     dc6:	80 e3       	ldi	r24, 0x30	; 48
     dc8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSendData>
				}
				LCD_vSendNumber(TMR_minutes);
     dcc:	80 91 18 01 	lds	r24, 0x0118
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <LCD_vSendNumber>
				do{
					LCD_vMoveCursor(2,1);
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vMoveCursor>
					LCD_vSendString("Set Secs: ");
     dde:	c1 01       	movw	r24, r2
     de0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
					do{
						press = KYP_u8CheckPress();
     de4:	0e 94 47 03 	call	0x68e	; 0x68e <KYP_u8CheckPress>
     de8:	c8 2f       	mov	r28, r24
     dea:	8f e7       	ldi	r24, 0x7F	; 127
     dec:	99 ea       	ldi	r25, 0xA9	; 169
     dee:	a3 e0       	ldi	r26, 0x03	; 3
     df0:	81 50       	subi	r24, 0x01	; 1
     df2:	90 40       	sbci	r25, 0x00	; 0
     df4:	a0 40       	sbci	r26, 0x00	; 0
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <main+0x320>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <main+0x32a>
     dfa:	00 00       	nop
						_delay_ms(150);
					}while(press < '0' || press > '9');
     dfc:	8c 2f       	mov	r24, r28
     dfe:	80 53       	subi	r24, 0x30	; 48
     e00:	8a 30       	cpi	r24, 0x0A	; 10
     e02:	80 f7       	brcc	.-32     	; 0xde4 <main+0x314>
					LCD_vSendData(press);
     e04:	8c 2f       	mov	r24, r28
     e06:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSendData>
     e0a:	8f e7       	ldi	r24, 0x7F	; 127
     e0c:	99 ea       	ldi	r25, 0xA9	; 169
     e0e:	a3 e0       	ldi	r26, 0x03	; 3
     e10:	81 50       	subi	r24, 0x01	; 1
     e12:	90 40       	sbci	r25, 0x00	; 0
     e14:	a0 40       	sbci	r26, 0x00	; 0
     e16:	e1 f7       	brne	.-8      	; 0xe10 <main+0x340>
     e18:	00 c0       	rjmp	.+0      	; 0xe1a <main+0x34a>
     e1a:	00 00       	nop
					_delay_ms(150);
					timer = 10*(press-48);
     e1c:	cc 0f       	add	r28, r28
     e1e:	dc 2f       	mov	r29, r28
     e20:	dd 0f       	add	r29, r29
     e22:	dd 0f       	add	r29, r29
     e24:	dc 0f       	add	r29, r28
					do{
						press = KYP_u8CheckPress();
     e26:	0e 94 47 03 	call	0x68e	; 0x68e <KYP_u8CheckPress>
     e2a:	c8 2f       	mov	r28, r24
     e2c:	8f e7       	ldi	r24, 0x7F	; 127
     e2e:	99 ea       	ldi	r25, 0xA9	; 169
     e30:	a3 e0       	ldi	r26, 0x03	; 3
     e32:	81 50       	subi	r24, 0x01	; 1
     e34:	90 40       	sbci	r25, 0x00	; 0
     e36:	a0 40       	sbci	r26, 0x00	; 0
     e38:	e1 f7       	brne	.-8      	; 0xe32 <main+0x362>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <main+0x36c>
     e3c:	00 00       	nop
						_delay_ms(150);
					}while(press < '0' || press > '9');
     e3e:	8c 2f       	mov	r24, r28
     e40:	80 53       	subi	r24, 0x30	; 48
     e42:	8a 30       	cpi	r24, 0x0A	; 10
     e44:	80 f7       	brcc	.-32     	; 0xe26 <main+0x356>
					LCD_vSendData(press);
     e46:	8c 2f       	mov	r24, r28
     e48:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSendData>
     e4c:	8f e7       	ldi	r24, 0x7F	; 127
     e4e:	99 ea       	ldi	r25, 0xA9	; 169
     e50:	a3 e0       	ldi	r26, 0x03	; 3
     e52:	81 50       	subi	r24, 0x01	; 1
     e54:	90 40       	sbci	r25, 0x00	; 0
     e56:	a0 40       	sbci	r26, 0x00	; 0
     e58:	e1 f7       	brne	.-8      	; 0xe52 <main+0x382>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <main+0x38c>
     e5c:	00 00       	nop
					_delay_ms(150);
					timer = timer + (press-48);
     e5e:	d0 51       	subi	r29, 0x10	; 16
     e60:	8d 2e       	mov	r8, r29
     e62:	8c 0e       	add	r8, r28
					if(timer>=60)
     e64:	9b e3       	ldi	r25, 0x3B	; 59
     e66:	98 15       	cp	r25, r8
     e68:	f8 f4       	brcc	.+62     	; 0xea8 <main+0x3d8>
					{
						LCD_vClearScreen();
     e6a:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_vClearScreen>
						LCD_vSendString("Unavailable");
     e6e:	c6 01       	movw	r24, r12
     e70:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
						LCD_vMoveCursor(2,1);
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	61 e0       	ldi	r22, 0x01	; 1
     e78:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vMoveCursor>
						LCD_vSendString("From 00 -> 59");
     e7c:	c3 01       	movw	r24, r6
     e7e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	99 e6       	ldi	r25, 0x69	; 105
     e86:	a8 e1       	ldi	r26, 0x18	; 24
     e88:	81 50       	subi	r24, 0x01	; 1
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	a0 40       	sbci	r26, 0x00	; 0
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <main+0x3b8>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <main+0x3c2>
     e92:	00 00       	nop
     e94:	a0 cf       	rjmp	.-192    	; 0xdd6 <main+0x306>
						_delay_ms(1000);
					}
				}while(timer>=60);
			}				
       	}
       	else if(press == '3')//stop watch
     e96:	c3 33       	cpi	r28, 0x33	; 51
     e98:	39 f4       	brne	.+14     	; 0xea8 <main+0x3d8>
       	{
	       	user_mode = 2;
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	80 93 16 01 	sts	0x0116, r24
			TMR_minutes=0;
     ea0:	10 92 18 01 	sts	0x0118, r1
			TMR_hours=0;
     ea4:	10 92 17 01 	sts	0x0117, r1
       	}
		LCD_vClearScreen();
     ea8:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_vClearScreen>
		if(user_mode == 0)
     eac:	80 91 16 01 	lds	r24, 0x0116
     eb0:	88 23       	and	r24, r24
     eb2:	29 f4       	brne	.+10     	; 0xebe <main+0x3ee>
		{
			LCD_vSendString("     Clock");		   
     eb4:	87 ed       	ldi	r24, 0xD7	; 215
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
     ebc:	11 c0       	rjmp	.+34     	; 0xee0 <main+0x410>
		}			   
		else if(user_mode == 1)
     ebe:	80 91 16 01 	lds	r24, 0x0116
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	29 f4       	brne	.+10     	; 0xed0 <main+0x400>
		{
			LCD_vSendString("     Timer");
     ec6:	82 ee       	ldi	r24, 0xE2	; 226
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
     ece:	08 c0       	rjmp	.+16     	; 0xee0 <main+0x410>
		}
		else if(user_mode == 2)
     ed0:	80 91 16 01 	lds	r24, 0x0116
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	21 f4       	brne	.+8      	; 0xee0 <main+0x410>
		{
			LCD_vSendString("   Stop Watch");
     ed8:	8d ee       	ldi	r24, 0xED	; 237
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
		}
			
		LCD_vMoveCursor(2,1);
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vMoveCursor>
		LCD_vSendString("Press ON to Stop");
     ee8:	8b ef       	ldi	r24, 0xFB	; 251
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_vSendString>
		
		press = NOT_PRESSED;	
		SEVSEG_vEnableControl('C',0,DISABLE_MUX);
     ef0:	83 e4       	ldi	r24, 0x43	; 67
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
		SEVSEG_vEnableControl('C',1,DISABLE_MUX);
     efa:	83 e4       	ldi	r24, 0x43	; 67
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
		SEVSEG_vEnableControl('C',2,DISABLE_MUX);
     f04:	83 e4       	ldi	r24, 0x43	; 67
     f06:	62 e0       	ldi	r22, 0x02	; 2
     f08:	40 e0       	ldi	r20, 0x00	; 0
     f0a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
		SEVSEG_vEnableControl('C',3,DISABLE_MUX);
     f0e:	83 e4       	ldi	r24, 0x43	; 67
     f10:	63 e0       	ldi	r22, 0x03	; 3
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
		SEVSEG_vEnableControl('C',4,DISABLE_MUX);
     f18:	83 e4       	ldi	r24, 0x43	; 67
     f1a:	64 e0       	ldi	r22, 0x04	; 4
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
		SEVSEG_vEnableControl('C',5,DISABLE_MUX);
     f22:	83 e4       	ldi	r24, 0x43	; 67
     f24:	65 e0       	ldi	r22, 0x05	; 5
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
		TMR_seconds=0;
     f2c:	10 92 19 01 	sts	0x0119, r1
		if(user_mode == 1)
     f30:	80 91 16 01 	lds	r24, 0x0116
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	11 f4       	brne	.+4      	; 0xf3c <main+0x46c>
		{
			TMR_seconds = timer;
     f38:	80 92 19 01 	sts	0x0119, r8
		{
			press = KYP_u8CheckPress();
			TMR0_counter=0;
			SEVSEG_vEnableControl('C',0,DISABLE_MUX);
			SEVSEG_vEnableControl('C',5,ENABLE_MUX);	
			SEVSEG_vWrite('D',TMR_hours/10);
     f3c:	ca e0       	ldi	r28, 0x0A	; 10
					TMR_seconds=59;
					TMR_minutes--;
				}
				if(TMR_minutes > 100)//overflow (-ve) makes the value of TMR_minutes = 255, I chose a bigger number than 60 
				{
					TMR_minutes=59;
     f3e:	0f 2e       	mov	r0, r31
     f40:	fb e3       	ldi	r31, 0x3B	; 59
     f42:	9f 2e       	mov	r9, r31
     f44:	f0 2d       	mov	r31, r0
		{
			TMR_seconds = timer;
		}
		while(press != 'A')
		{
			press = KYP_u8CheckPress();
     f46:	0e 94 47 03 	call	0x68e	; 0x68e <KYP_u8CheckPress>
     f4a:	d8 2f       	mov	r29, r24
			TMR0_counter=0;
     f4c:	10 92 1b 01 	sts	0x011B, r1
     f50:	10 92 1a 01 	sts	0x011A, r1
			SEVSEG_vEnableControl('C',0,DISABLE_MUX);
     f54:	83 e4       	ldi	r24, 0x43	; 67
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
			SEVSEG_vEnableControl('C',5,ENABLE_MUX);	
     f5e:	83 e4       	ldi	r24, 0x43	; 67
     f60:	65 e0       	ldi	r22, 0x05	; 5
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
			SEVSEG_vWrite('D',TMR_hours/10);
     f68:	80 91 17 01 	lds	r24, 0x0117
     f6c:	6c 2f       	mov	r22, r28
     f6e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__udivmodqi4>
     f72:	68 2f       	mov	r22, r24
     f74:	84 e4       	ldi	r24, 0x44	; 68
     f76:	0e 94 c8 08 	call	0x1190	; 0x1190 <SEVSEG_vWrite>
			while(TMR0_counter == 0);
     f7a:	80 91 1a 01 	lds	r24, 0x011A
     f7e:	90 91 1b 01 	lds	r25, 0x011B
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	d1 f3       	breq	.-12     	; 0xf7a <main+0x4aa>
			SEVSEG_vEnableControl('C',5,DISABLE_MUX);
     f86:	83 e4       	ldi	r24, 0x43	; 67
     f88:	65 e0       	ldi	r22, 0x05	; 5
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
			SEVSEG_vEnableControl('C',4,ENABLE_MUX);
     f90:	83 e4       	ldi	r24, 0x43	; 67
     f92:	64 e0       	ldi	r22, 0x04	; 4
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
			SEVSEG_vWrite('D',TMR_hours%10);
     f9a:	80 91 17 01 	lds	r24, 0x0117
     f9e:	6c 2f       	mov	r22, r28
     fa0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__udivmodqi4>
     fa4:	84 e4       	ldi	r24, 0x44	; 68
     fa6:	69 2f       	mov	r22, r25
     fa8:	0e 94 c8 08 	call	0x1190	; 0x1190 <SEVSEG_vWrite>
			while(TMR0_counter == 1);
     fac:	80 91 1a 01 	lds	r24, 0x011A
     fb0:	90 91 1b 01 	lds	r25, 0x011B
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	91 05       	cpc	r25, r1
     fb8:	c9 f3       	breq	.-14     	; 0xfac <main+0x4dc>
			SEVSEG_vEnableControl('C',4,DISABLE_MUX);
     fba:	83 e4       	ldi	r24, 0x43	; 67
     fbc:	64 e0       	ldi	r22, 0x04	; 4
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
			SEVSEG_vEnableControl('C',3,ENABLE_MUX);
     fc4:	83 e4       	ldi	r24, 0x43	; 67
     fc6:	63 e0       	ldi	r22, 0x03	; 3
     fc8:	41 e0       	ldi	r20, 0x01	; 1
     fca:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
			SEVSEG_vWrite('D',TMR_minutes/10);
     fce:	80 91 18 01 	lds	r24, 0x0118
     fd2:	6c 2f       	mov	r22, r28
     fd4:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__udivmodqi4>
     fd8:	68 2f       	mov	r22, r24
     fda:	84 e4       	ldi	r24, 0x44	; 68
     fdc:	0e 94 c8 08 	call	0x1190	; 0x1190 <SEVSEG_vWrite>
			while(TMR0_counter == 2);
     fe0:	80 91 1a 01 	lds	r24, 0x011A
     fe4:	90 91 1b 01 	lds	r25, 0x011B
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	91 05       	cpc	r25, r1
     fec:	c9 f3       	breq	.-14     	; 0xfe0 <main+0x510>
			SEVSEG_vEnableControl('C',3,DISABLE_MUX);
     fee:	83 e4       	ldi	r24, 0x43	; 67
     ff0:	63 e0       	ldi	r22, 0x03	; 3
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
			SEVSEG_vEnableControl('C',2,ENABLE_MUX);
     ff8:	83 e4       	ldi	r24, 0x43	; 67
     ffa:	62 e0       	ldi	r22, 0x02	; 2
     ffc:	41 e0       	ldi	r20, 0x01	; 1
     ffe:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
			SEVSEG_vWrite('D',TMR_minutes%10);
    1002:	80 91 18 01 	lds	r24, 0x0118
    1006:	6c 2f       	mov	r22, r28
    1008:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__udivmodqi4>
    100c:	84 e4       	ldi	r24, 0x44	; 68
    100e:	69 2f       	mov	r22, r25
    1010:	0e 94 c8 08 	call	0x1190	; 0x1190 <SEVSEG_vWrite>
			while(TMR0_counter == 3);
    1014:	80 91 1a 01 	lds	r24, 0x011A
    1018:	90 91 1b 01 	lds	r25, 0x011B
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	91 05       	cpc	r25, r1
    1020:	c9 f3       	breq	.-14     	; 0x1014 <main+0x544>
			SEVSEG_vEnableControl('C',2,DISABLE_MUX);
    1022:	83 e4       	ldi	r24, 0x43	; 67
    1024:	62 e0       	ldi	r22, 0x02	; 2
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
			SEVSEG_vEnableControl('C',1,ENABLE_MUX);
    102c:	83 e4       	ldi	r24, 0x43	; 67
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
			SEVSEG_vWrite('D',TMR_seconds/10);
    1036:	80 91 19 01 	lds	r24, 0x0119
    103a:	6c 2f       	mov	r22, r28
    103c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__udivmodqi4>
    1040:	68 2f       	mov	r22, r24
    1042:	84 e4       	ldi	r24, 0x44	; 68
    1044:	0e 94 c8 08 	call	0x1190	; 0x1190 <SEVSEG_vWrite>
			while(TMR0_counter == 4);
    1048:	80 91 1a 01 	lds	r24, 0x011A
    104c:	90 91 1b 01 	lds	r25, 0x011B
    1050:	84 30       	cpi	r24, 0x04	; 4
    1052:	91 05       	cpc	r25, r1
    1054:	c9 f3       	breq	.-14     	; 0x1048 <main+0x578>
			SEVSEG_vEnableControl('C',1,DISABLE_MUX);
    1056:	83 e4       	ldi	r24, 0x43	; 67
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
			SEVSEG_vEnableControl('C',0,ENABLE_MUX);
    1060:	83 e4       	ldi	r24, 0x43	; 67
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	41 e0       	ldi	r20, 0x01	; 1
    1066:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
			SEVSEG_vWrite('D',TMR_seconds%10);
    106a:	80 91 19 01 	lds	r24, 0x0119
    106e:	6c 2f       	mov	r22, r28
    1070:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__udivmodqi4>
    1074:	84 e4       	ldi	r24, 0x44	; 68
    1076:	69 2f       	mov	r22, r25
    1078:	0e 94 c8 08 	call	0x1190	; 0x1190 <SEVSEG_vWrite>
			while(TMR0_counter == 5);
    107c:	80 91 1a 01 	lds	r24, 0x011A
    1080:	90 91 1b 01 	lds	r25, 0x011B
    1084:	85 30       	cpi	r24, 0x05	; 5
    1086:	91 05       	cpc	r25, r1
    1088:	c9 f3       	breq	.-14     	; 0x107c <main+0x5ac>
			if(user_mode == 0 || user_mode==2) //clock OR stop watch
    108a:	80 91 16 01 	lds	r24, 0x0116
    108e:	88 23       	and	r24, r24
    1090:	21 f0       	breq	.+8      	; 0x109a <main+0x5ca>
    1092:	80 91 16 01 	lds	r24, 0x0116
    1096:	82 30       	cpi	r24, 0x02	; 2
    1098:	e9 f4       	brne	.+58     	; 0x10d4 <main+0x604>
			{
				if(TMR_seconds >= 60)	
    109a:	80 91 19 01 	lds	r24, 0x0119
    109e:	8c 33       	cpi	r24, 0x3C	; 60
    10a0:	38 f0       	brcs	.+14     	; 0x10b0 <main+0x5e0>
				{
					TMR_seconds=0;
    10a2:	10 92 19 01 	sts	0x0119, r1
					TMR_minutes++;
    10a6:	80 91 18 01 	lds	r24, 0x0118
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	80 93 18 01 	sts	0x0118, r24
				}
				if(TMR_minutes >= 60)
    10b0:	80 91 18 01 	lds	r24, 0x0118
    10b4:	8c 33       	cpi	r24, 0x3C	; 60
    10b6:	38 f0       	brcs	.+14     	; 0x10c6 <main+0x5f6>
				{
					TMR_minutes=0;
    10b8:	10 92 18 01 	sts	0x0118, r1
					TMR_hours++;
    10bc:	80 91 17 01 	lds	r24, 0x0117
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    10c2:	80 93 17 01 	sts	0x0117, r24
				}
				if(TMR_hours >= 24)
    10c6:	80 91 17 01 	lds	r24, 0x0117
    10ca:	88 31       	cpi	r24, 0x18	; 24
    10cc:	70 f1       	brcs	.+92     	; 0x112a <main+0x65a>
				{
					TMR_hours=0;
    10ce:	10 92 17 01 	sts	0x0117, r1
    10d2:	2b c0       	rjmp	.+86     	; 0x112a <main+0x65a>
				}
			}
			else if(user_mode == 1)//timer
    10d4:	80 91 16 01 	lds	r24, 0x0116
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	39 f5       	brne	.+78     	; 0x112a <main+0x65a>
			{
				if(TMR_seconds == 0)
    10dc:	80 91 19 01 	lds	r24, 0x0119
    10e0:	88 23       	and	r24, r24
    10e2:	39 f4       	brne	.+14     	; 0x10f2 <main+0x622>
				{
					TMR_seconds=59;
    10e4:	90 92 19 01 	sts	0x0119, r9
					TMR_minutes--;
    10e8:	80 91 18 01 	lds	r24, 0x0118
    10ec:	81 50       	subi	r24, 0x01	; 1
    10ee:	80 93 18 01 	sts	0x0118, r24
				}
				if(TMR_minutes > 100)//overflow (-ve) makes the value of TMR_minutes = 255, I chose a bigger number than 60 
    10f2:	80 91 18 01 	lds	r24, 0x0118
    10f6:	85 36       	cpi	r24, 0x65	; 101
    10f8:	38 f0       	brcs	.+14     	; 0x1108 <main+0x638>
				{
					TMR_minutes=59;
    10fa:	90 92 18 01 	sts	0x0118, r9
					TMR_hours--;
    10fe:	80 91 17 01 	lds	r24, 0x0117
    1102:	81 50       	subi	r24, 0x01	; 1
    1104:	80 93 17 01 	sts	0x0117, r24
				}
				if(TMR_hours > 100)
    1108:	80 91 17 01 	lds	r24, 0x0117
    110c:	85 36       	cpi	r24, 0x65	; 101
    110e:	68 f0       	brcs	.+26     	; 0x112a <main+0x65a>
				{
					TMR_hours=0;
    1110:	10 92 17 01 	sts	0x0117, r1
					TMR_minutes=0;
    1114:	10 92 18 01 	sts	0x0118, r1
					TMR_seconds=0;
    1118:	10 92 19 01 	sts	0x0119, r1
					user_mode=3; // change mode to stop changing the timer values after 00:00:00
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	80 93 16 01 	sts	0x0116, r24
					LED_vSwitchON('A',7);
    1122:	81 e4       	ldi	r24, 0x41	; 65
    1124:	67 e0       	ldi	r22, 0x07	; 7
    1126:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LED_vSwitchON>
		TMR_seconds=0;
		if(user_mode == 1)
		{
			TMR_seconds = timer;
		}
		while(press != 'A')
    112a:	d1 34       	cpi	r29, 0x41	; 65
    112c:	09 f0       	breq	.+2      	; 0x1130 <main+0x660>
    112e:	0b cf       	rjmp	.-490    	; 0xf46 <main+0x476>
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	91 ee       	ldi	r25, 0xE1	; 225
    1134:	a4 e0       	ldi	r26, 0x04	; 4
    1136:	81 50       	subi	r24, 0x01	; 1
    1138:	90 40       	sbci	r25, 0x00	; 0
    113a:	a0 40       	sbci	r26, 0x00	; 0
    113c:	e1 f7       	brne	.-8      	; 0x1136 <main+0x666>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <main+0x670>
    1140:	00 00       	nop
					LED_vSwitchON('A',7);
				}
			}
		}
		_delay_ms(200);		
		SEVSEG_vEnableControl('C',0,DISABLE_MUX);
    1142:	83 e4       	ldi	r24, 0x43	; 67
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
		SEVSEG_vEnableControl('C',1,DISABLE_MUX);
    114c:	83 e4       	ldi	r24, 0x43	; 67
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
		SEVSEG_vEnableControl('C',2,DISABLE_MUX);
    1156:	83 e4       	ldi	r24, 0x43	; 67
    1158:	62 e0       	ldi	r22, 0x02	; 2
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
		SEVSEG_vEnableControl('C',3,DISABLE_MUX);
    1160:	83 e4       	ldi	r24, 0x43	; 67
    1162:	63 e0       	ldi	r22, 0x03	; 3
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
		SEVSEG_vEnableControl('C',4,DISABLE_MUX);
    116a:	83 e4       	ldi	r24, 0x43	; 67
    116c:	64 e0       	ldi	r22, 0x04	; 4
    116e:	40 e0       	ldi	r20, 0x00	; 0
    1170:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
		SEVSEG_vEnableControl('C',5,DISABLE_MUX);	
    1174:	83 e4       	ldi	r24, 0x43	; 67
    1176:	65 e0       	ldi	r22, 0x05	; 5
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SEVSEG_vEnableControl>
		LED_vSwitchOFF('A',7);
    117e:	81 e4       	ldi	r24, 0x41	; 65
    1180:	67 e0       	ldi	r22, 0x07	; 7
    1182:	0e 94 31 05 	call	0xa62	; 0xa62 <LED_vSwitchOFF>
    }
    1186:	f9 cc       	rjmp	.-1550   	; 0xb7a <main+0xaa>

00001188 <SEVSEG_vInit>:
#include "SEVSEG_interface.h"


void SEVSEG_vInit (uint8 Copy_u8Port)
{
	DIO_vSetPortDir(Copy_u8Port,0xFF); //all ones to make all the port output
    1188:	6f ef       	ldi	r22, 0xFF	; 255
    118a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_vSetPortDir>
}
    118e:	08 95       	ret

00001190 <SEVSEG_vWrite>:

void SEVSEG_vWrite (uint8 Copy_u8Port , uint8 Copy_u8Value)
{
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	2a 97       	sbiw	r28, 0x0a	; 10
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
	#ifdef COMCATHODE
	uint8 SEVSEG_arr[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F}; // all the 7 segment numbers in hex in the com cathode mode
    11a4:	de 01       	movw	r26, r28
    11a6:	11 96       	adiw	r26, 0x01	; 1
    11a8:	ec e0       	ldi	r30, 0x0C	; 12
    11aa:	f1 e0       	ldi	r31, 0x01	; 1
    11ac:	9a e0       	ldi	r25, 0x0A	; 10
    11ae:	01 90       	ld	r0, Z+
    11b0:	0d 92       	st	X+, r0
    11b2:	91 50       	subi	r25, 0x01	; 1
    11b4:	e1 f7       	brne	.-8      	; 0x11ae <SEVSEG_vWrite+0x1e>
	#else
	uint8 SEVSEG_arr[]={~0x3F,~0x06,~0x5B,~0x4F,~0x66,~0x6D,~0x7D,~0x07,~0x7F,~0x6F}; // all the 7 segment numbers in hex in the com anode mode
	#endif
	DIO_vWritePort(Copy_u8Port,SEVSEG_arr[Copy_u8Value]);
    11b6:	fe 01       	movw	r30, r28
    11b8:	e6 0f       	add	r30, r22
    11ba:	f1 1d       	adc	r31, r1
    11bc:	61 81       	ldd	r22, Z+1	; 0x01
    11be:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_vWritePort>
}
    11c2:	2a 96       	adiw	r28, 0x0a	; 10
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <SEVSEG_vEnableInit>:

void SEVSEG_vEnableInit(uint8 Copy_u8Port , uint8 Copy_u8Pin)
{
	//set the pin as output
	DIO_vSetPinDir(Copy_u8Port,Copy_u8Pin,PIN_OUTPUT);
    11d4:	41 e0       	ldi	r20, 0x01	; 1
    11d6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
}
    11da:	08 95       	ret

000011dc <SEVSEG_vEnableControl>:


void SEVSEG_vEnableControl(uint8 Copy_u8Port , uint8 Copy_u8Pin , uint8 Copy_u8EnableBit)
{
	if(Copy_u8EnableBit == ENABLE_MUX)
    11dc:	41 30       	cpi	r20, 0x01	; 1
    11de:	21 f4       	brne	.+8      	; 0x11e8 <SEVSEG_vEnableControl+0xc>
	{
		DIO_vWritePin(Copy_u8Port,Copy_u8Pin,LOW); // clear the pin to work as ground
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
    11e6:	08 95       	ret
	}
	else if(Copy_u8EnableBit == DISABLE_MUX)
    11e8:	44 23       	and	r20, r20
    11ea:	19 f4       	brne	.+6      	; 0x11f2 <SEVSEG_vEnableControl+0x16>
	{
		DIO_vWritePin(Copy_u8Port,Copy_u8Pin,HIGH);
    11ec:	41 e0       	ldi	r20, 0x01	; 1
    11ee:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
    11f2:	08 95       	ret

000011f4 <TMR0_OVF_SetCallBack>:
void (*GP_TMR0_COMP)(void) = '\0';

/*call back functions */
void TMR0_OVF_SetCallBack(void(*ptr)(void))
{
	GP_TMR0_OVF=ptr;
    11f4:	90 93 1f 01 	sts	0x011F, r25
    11f8:	80 93 1e 01 	sts	0x011E, r24
}
    11fc:	08 95       	ret

000011fe <TMR0_COMP_SetCallBack>:

void TMR0_COMP_SetCallBack(void(*ptr)(void))
{
	GP_TMR0_COMP=ptr;
    11fe:	90 93 1d 01 	sts	0x011D, r25
    1202:	80 93 1c 01 	sts	0x011C, r24
}
    1206:	08 95       	ret

00001208 <TMR0_vInit>:
	SET_BIT(TIMSK,TOIE0);
	
	
	#elif defined TMR0_CTC_MODE
	//set CTC mode WGM01:0 = 10
	SET_BIT(TCCR0,WGM01);
    1208:	83 b7       	in	r24, 0x33	; 51
    120a:	88 60       	ori	r24, 0x08	; 8
    120c:	83 bf       	out	0x33, r24	; 51
	
	//load OCR0 value (157 -> 20msec at ISR)
	OCR0 = 39;//10msec at ISR
    120e:	87 e2       	ldi	r24, 0x27	; 39
    1210:	8c bf       	out	0x3c, r24	; 60
	
	//set timer clk , prescale /1024 CS00:2=101
	SET_BIT(TCCR0,CS00);
    1212:	83 b7       	in	r24, 0x33	; 51
    1214:	81 60       	ori	r24, 0x01	; 1
    1216:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1218:	83 b7       	in	r24, 0x33	; 51
    121a:	84 60       	ori	r24, 0x04	; 4
    121c:	83 bf       	out	0x33, r24	; 51
	
	//enable general interrupt
	GIE_EnableInterrupt();
    121e:	0e 94 12 03 	call	0x624	; 0x624 <GIE_EnableInterrupt>
	
	//set OverFlow interrupt Enable
	SET_BIT(TIMSK,OCIE0);
    1222:	89 b7       	in	r24, 0x39	; 57
    1224:	82 60       	ori	r24, 0x02	; 2
    1226:	89 bf       	out	0x39, r24	; 57
	//Set OC0 on compare match when up-counting COM01:0 = 11
	SET_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);
	
	#endif
}
    1228:	08 95       	ret

0000122a <__vector_10>:


/*ISR(TIMER0_COMP_vect) */
void __vector_10()__attribute__((signal)) ;
void __vector_10()
{
    122a:	1f 92       	push	r1
    122c:	0f 92       	push	r0
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	0f 92       	push	r0
    1232:	11 24       	eor	r1, r1
    1234:	2f 93       	push	r18
    1236:	3f 93       	push	r19
    1238:	4f 93       	push	r20
    123a:	5f 93       	push	r21
    123c:	6f 93       	push	r22
    123e:	7f 93       	push	r23
    1240:	8f 93       	push	r24
    1242:	9f 93       	push	r25
    1244:	af 93       	push	r26
    1246:	bf 93       	push	r27
    1248:	ef 93       	push	r30
    124a:	ff 93       	push	r31
	if (GP_TMR0_COMP != '\0')
    124c:	e0 91 1c 01 	lds	r30, 0x011C
    1250:	f0 91 1d 01 	lds	r31, 0x011D
    1254:	30 97       	sbiw	r30, 0x00	; 0
    1256:	09 f0       	breq	.+2      	; 0x125a <__vector_10+0x30>
	{
		GP_TMR0_COMP();
    1258:	09 95       	icall
	}
}
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	bf 91       	pop	r27
    1260:	af 91       	pop	r26
    1262:	9f 91       	pop	r25
    1264:	8f 91       	pop	r24
    1266:	7f 91       	pop	r23
    1268:	6f 91       	pop	r22
    126a:	5f 91       	pop	r21
    126c:	4f 91       	pop	r20
    126e:	3f 91       	pop	r19
    1270:	2f 91       	pop	r18
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0f 90       	pop	r0
    1278:	1f 90       	pop	r1
    127a:	18 95       	reti

0000127c <__vector_11>:

/*ISR(TIMER0_OVF_vect) */
void __vector_11()__attribute__((signal)) ;
void __vector_11()
{
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	ef 93       	push	r30
    129c:	ff 93       	push	r31
	if (GP_TMR0_OVF != '\0')
    129e:	e0 91 1e 01 	lds	r30, 0x011E
    12a2:	f0 91 1f 01 	lds	r31, 0x011F
    12a6:	30 97       	sbiw	r30, 0x00	; 0
    12a8:	09 f0       	breq	.+2      	; 0x12ac <__vector_11+0x30>
	{
		GP_TMR0_OVF();
    12aa:	09 95       	icall
	}
}
    12ac:	ff 91       	pop	r31
    12ae:	ef 91       	pop	r30
    12b0:	bf 91       	pop	r27
    12b2:	af 91       	pop	r26
    12b4:	9f 91       	pop	r25
    12b6:	8f 91       	pop	r24
    12b8:	7f 91       	pop	r23
    12ba:	6f 91       	pop	r22
    12bc:	5f 91       	pop	r21
    12be:	4f 91       	pop	r20
    12c0:	3f 91       	pop	r19
    12c2:	2f 91       	pop	r18
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	0f 90       	pop	r0
    12ca:	1f 90       	pop	r1
    12cc:	18 95       	reti

000012ce <TMR2_OVF_SetCallBack>:
void (*GP_TMR2_COMP)(void) = '\0';

/*call back functions */
void TMR2_OVF_SetCallBack(void(*ptr)(void))
{
	GP_TMR2_OVF=ptr;
    12ce:	90 93 23 01 	sts	0x0123, r25
    12d2:	80 93 22 01 	sts	0x0122, r24
}
    12d6:	08 95       	ret

000012d8 <TMR2_COMP_SetCallBack>:

void TMR2_COMP_SetCallBack(void(*ptr)(void))
{
	GP_TMR2_COMP=ptr;
    12d8:	90 93 21 01 	sts	0x0121, r25
    12dc:	80 93 20 01 	sts	0x0120, r24
}
    12e0:	08 95       	ret

000012e2 <TMR2_vInit>:
	#if defined TMR2_NORMAL_MODE
	//set normal mode WGM01:0 = 00
	
	//select timer clock
	#ifdef EXTERNAL_CLK
	SET_BIT(ASSR,AS2); // clk from a crystal or external clk connected to TOSC1 pin
    12e2:	82 b5       	in	r24, 0x22	; 34
    12e4:	88 60       	ori	r24, 0x08	; 8
    12e6:	82 bd       	out	0x22, r24	; 34
	#else
	CLR_BIT(ASSR,AS2); // MC clock
	#endif
	//set timer clk , prescale /128 CS22:0=101
	SET_BIT(TCCR2,CS20);
    12e8:	85 b5       	in	r24, 0x25	; 37
    12ea:	81 60       	ori	r24, 0x01	; 1
    12ec:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
    12ee:	85 b5       	in	r24, 0x25	; 37
    12f0:	84 60       	ori	r24, 0x04	; 4
    12f2:	85 bd       	out	0x25, r24	; 37
	
	//enable general interrupt
	GIE_EnableInterrupt();
    12f4:	0e 94 12 03 	call	0x624	; 0x624 <GIE_EnableInterrupt>
	
	//set OverFlow interrupt Enable
	SET_BIT(TIMSK,TOIE2);
    12f8:	89 b7       	in	r24, 0x39	; 57
    12fa:	80 64       	ori	r24, 0x40	; 64
    12fc:	89 bf       	out	0x39, r24	; 57
	//Set OC2 on compare match when up-counting COM21:0 = 11
	SET_BIT(TCCR2,COM20);
	SET_BIT(TCCR2,COM21);
	
	#endif
}
    12fe:	08 95       	ret

00001300 <__vector_4>:


/*ISR(TIMER2_COMP_vect) */
void __vector_4()__attribute__((signal)) ;
void __vector_4()
{
    1300:	1f 92       	push	r1
    1302:	0f 92       	push	r0
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	0f 92       	push	r0
    1308:	11 24       	eor	r1, r1
    130a:	2f 93       	push	r18
    130c:	3f 93       	push	r19
    130e:	4f 93       	push	r20
    1310:	5f 93       	push	r21
    1312:	6f 93       	push	r22
    1314:	7f 93       	push	r23
    1316:	8f 93       	push	r24
    1318:	9f 93       	push	r25
    131a:	af 93       	push	r26
    131c:	bf 93       	push	r27
    131e:	ef 93       	push	r30
    1320:	ff 93       	push	r31
	if (GP_TMR2_COMP != '\0')
    1322:	e0 91 20 01 	lds	r30, 0x0120
    1326:	f0 91 21 01 	lds	r31, 0x0121
    132a:	30 97       	sbiw	r30, 0x00	; 0
    132c:	09 f0       	breq	.+2      	; 0x1330 <__vector_4+0x30>
	{
		GP_TMR2_COMP();
    132e:	09 95       	icall
	}
}
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <__vector_5>:

/*ISR(TIMER2_OVF_vect) */
void __vector_5()__attribute__((signal)) ;
void __vector_5()
{
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
	if (GP_TMR2_OVF != '\0')
    1374:	e0 91 22 01 	lds	r30, 0x0122
    1378:	f0 91 23 01 	lds	r31, 0x0123
    137c:	30 97       	sbiw	r30, 0x00	; 0
    137e:	09 f0       	breq	.+2      	; 0x1382 <__vector_5+0x30>
	{
		GP_TMR2_OVF();
    1380:	09 95       	icall
	}
}
    1382:	ff 91       	pop	r31
    1384:	ef 91       	pop	r30
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	7f 91       	pop	r23
    1390:	6f 91       	pop	r22
    1392:	5f 91       	pop	r21
    1394:	4f 91       	pop	r20
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti

000013a4 <__udivmodqi4>:
    13a4:	99 1b       	sub	r25, r25
    13a6:	79 e0       	ldi	r23, 0x09	; 9
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <__udivmodqi4_ep>

000013aa <__udivmodqi4_loop>:
    13aa:	99 1f       	adc	r25, r25
    13ac:	96 17       	cp	r25, r22
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <__udivmodqi4_ep>
    13b0:	96 1b       	sub	r25, r22

000013b2 <__udivmodqi4_ep>:
    13b2:	88 1f       	adc	r24, r24
    13b4:	7a 95       	dec	r23
    13b6:	c9 f7       	brne	.-14     	; 0x13aa <__udivmodqi4_loop>
    13b8:	80 95       	com	r24
    13ba:	08 95       	ret

000013bc <__udivmodhi4>:
    13bc:	aa 1b       	sub	r26, r26
    13be:	bb 1b       	sub	r27, r27
    13c0:	51 e1       	ldi	r21, 0x11	; 17
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <__udivmodhi4_ep>

000013c4 <__udivmodhi4_loop>:
    13c4:	aa 1f       	adc	r26, r26
    13c6:	bb 1f       	adc	r27, r27
    13c8:	a6 17       	cp	r26, r22
    13ca:	b7 07       	cpc	r27, r23
    13cc:	10 f0       	brcs	.+4      	; 0x13d2 <__udivmodhi4_ep>
    13ce:	a6 1b       	sub	r26, r22
    13d0:	b7 0b       	sbc	r27, r23

000013d2 <__udivmodhi4_ep>:
    13d2:	88 1f       	adc	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	5a 95       	dec	r21
    13d8:	a9 f7       	brne	.-22     	; 0x13c4 <__udivmodhi4_loop>
    13da:	80 95       	com	r24
    13dc:	90 95       	com	r25
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	08 95       	ret

000013e4 <_exit>:
    13e4:	f8 94       	cli

000013e6 <__stop_program>:
    13e6:	ff cf       	rjmp	.-2      	; 0x13e6 <__stop_program>
